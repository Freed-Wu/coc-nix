>{ lib, ... }:
#^ source.nix punctuation.definition.entity.function.2.nix
# ^ source.nix
#  ^^^ source.nix variable.parameter.function.1.nix
#     ^ source.nix keyword.operator.nix
#      ^ source.nix
#       ^^^ source.nix keyword.operator.nix
#          ^ source.nix keyword.operator.nix
#           ^ source.nix punctuation.definition.entity.function.nix
#            ^ source.nix punctuation.definition.function.nix
>let
#^^^ source.nix keyword.other.nix
>    inherit (builtins) head tail isList isAttrs isInt attrNames;
#^^^^ source.nix
#    ^^^^^^^ source.nix keyword.other.inherit.nix
#           ^ source.nix
#            ^ source.nix punctuation.section.function.arguments.nix
#             ^^^^^^^^ source.nix constant.language.nix
#                     ^ source.nix punctuation.section.function.arguments.nix
#                      ^ source.nix
#                       ^^^^ source.nix entity.other.attribute-name.single.nix
#                           ^ source.nix
#                            ^^^^ source.nix entity.other.attribute-name.single.nix
#                                ^ source.nix
#                                 ^^^^^^ source.nix entity.other.attribute-name.single.nix
#                                       ^ source.nix
#                                        ^^^^^^^ source.nix entity.other.attribute-name.single.nix
#                                               ^ source.nix
#                                                ^^^^^ source.nix entity.other.attribute-name.single.nix
#                                                     ^ source.nix
#                                                      ^^^^^^^^^ source.nix entity.other.attribute-name.single.nix
#                                                               ^ source.nix punctuation.terminator.inherit.nix
>
>in
#^^ source.nix keyword.other.nix
>
>with lib.lists;
#^^^^ source.nix keyword.other.nix
#    ^ source.nix
#     ^^^ source.nix variable.parameter.name.nix
#        ^ source.nix keyword.operator.nix
#         ^^^^^ source.nix variable.parameter.name.nix
#              ^ source.nix
>with lib.attrsets;
#^^^^ source.nix keyword.other.nix
#    ^ source.nix
#     ^^^ source.nix variable.parameter.name.nix
#        ^ source.nix keyword.operator.nix
#         ^^^^^^^^ source.nix variable.parameter.name.nix
#                 ^ source.nix
>with lib.strings;
#^^^^ source.nix keyword.other.nix
#    ^ source.nix
#     ^^^ source.nix variable.parameter.name.nix
#        ^ source.nix keyword.operator.nix
#         ^^^^^^^ source.nix variable.parameter.name.nix
#                ^ source.nix
>
>rec {
#^^^ source.nix keyword.other.nix
#   ^ source.nix
#    ^ source.nix punctuation.definition.attrset.nix
>
>  # returns default if env var is not set
#^^ source.nix
#  ^ source.nix comment.line.number-sign.nix
#   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix comment.line.number-sign.nix
>  maybeEnv = name: default:
#^^ source.nix
#  ^^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#          ^ source.nix
#           ^ source.nix keyword.operator.bind.nix
#            ^ source.nix
#             ^^^^ source.nix variable.parameter.function.4.nix
#                 ^ source.nix punctuation.definition.function.nix
#                  ^ source.nix
#                   ^^^^^^^ source.nix variable.parameter.function.4.nix
#                          ^ source.nix punctuation.definition.function.nix
>    let value = builtins.getEnv name; in
#^^^^ source.nix
#    ^^^ source.nix keyword.other.nix
#       ^ source.nix
#        ^^^^^ source.nix entity.other.attribute-name.multipart.nix
#             ^ source.nix
#              ^ source.nix keyword.operator.bind.nix
#               ^ source.nix
#                ^^^^^^^^ source.nix constant.language.nix
#                        ^ source.nix keyword.operator.nix
#                         ^^^^^^ source.nix variable.parameter.name.nix
#                               ^ source.nix
#                                ^^^^ source.nix variable.parameter.name.nix
#                                    ^ source.nix punctuation.terminator.bind.nix
#                                     ^ source.nix
#                                      ^^ source.nix keyword.other.nix
>    if value == "" then default else value;
#^^^^ source.nix
#    ^^ source.nix keyword.other.nix
#      ^ source.nix
#       ^^^^^ source.nix variable.parameter.name.nix
#            ^ source.nix
#             ^^ source.nix keyword.operator.nix
#               ^ source.nix
#                ^ source.nix string.quoted.double.nix punctuation.definition.string.double.start.nix
#                 ^ source.nix string.quoted.double.nix punctuation.definition.string.double.end.nix
#                  ^ source.nix
#                   ^^ source.nix keyword.other.nix
#                     ^^ source.nix keyword.other.nix
#                       ^ source.nix
#                        ^^^^^^^ source.nix variable.parameter.name.nix
#                               ^ source.nix
#                                ^^ source.nix keyword.other.nix
#                                  ^^ source.nix keyword.other.nix
#                                    ^ source.nix
#                                     ^^^^^ source.nix variable.parameter.name.nix
#                                          ^ source.nix punctuation.terminator.bind.nix
>
>  defaultMergeArg = x : y: if builtins.isAttrs y then
#^^ source.nix
#  ^^^^^^^^^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#                 ^ source.nix
#                  ^ source.nix keyword.operator.bind.nix
#                   ^ source.nix
#                    ^ source.nix variable.parameter.function.4.nix
#                     ^ source.nix
#                      ^ source.nix punctuation.definition.function.nix
#                       ^ source.nix
#                        ^ source.nix variable.parameter.function.4.nix
#                         ^ source.nix punctuation.definition.function.nix
#                          ^ source.nix
#                           ^^ source.nix keyword.other.nix
#                             ^ source.nix
#                              ^^^^^^^^ source.nix constant.language.nix
#                                      ^ source.nix keyword.operator.nix
#                                       ^^^^^^^ source.nix variable.parameter.name.nix
#                                              ^ source.nix
#                                               ^ source.nix variable.parameter.name.nix
#                                                ^ source.nix
#                                                 ^^ source.nix keyword.other.nix
#                                                   ^^ source.nix keyword.other.nix
>    y
#^^^^ source.nix
#    ^ source.nix variable.parameter.name.nix
>  else
#^^ source.nix
#  ^^ source.nix keyword.other.nix
#    ^^ source.nix keyword.other.nix
>    (y x);
#^^^^ source.nix
#    ^ source.nix punctuation.definition.expression.nix
#     ^ source.nix variable.parameter.name.nix
#      ^ source.nix
#       ^ source.nix variable.parameter.name.nix
#        ^ source.nix punctuation.definition.expression.nix
#         ^ source.nix punctuation.terminator.bind.nix
>  defaultMerge = x: y: x // (defaultMergeArg x y);
#^^ source.nix
#  ^^^^^^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#              ^ source.nix
#               ^ source.nix keyword.operator.bind.nix
#                ^ source.nix
#                 ^ source.nix variable.parameter.function.4.nix
#                  ^ source.nix punctuation.definition.function.nix
#                   ^ source.nix
#                    ^ source.nix variable.parameter.function.4.nix
#                     ^ source.nix punctuation.definition.function.nix
#                      ^ source.nix
#                       ^ source.nix variable.parameter.name.nix
#                        ^ source.nix
#                         ^^ source.nix keyword.operator.nix
#                           ^ source.nix
#                            ^ source.nix punctuation.definition.expression.nix
#                             ^^^^^^^^^^^^^^^ source.nix variable.parameter.name.nix
#                                            ^ source.nix
#                                             ^ source.nix variable.parameter.name.nix
#                                              ^ source.nix
#                                               ^ source.nix variable.parameter.name.nix
#                                                ^ source.nix punctuation.definition.expression.nix
#                                                 ^ source.nix punctuation.terminator.bind.nix
>  foldArgs = merger: f: init: x:
#^^ source.nix
#  ^^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#          ^ source.nix
#           ^ source.nix keyword.operator.bind.nix
#            ^ source.nix
#             ^^^^^^ source.nix variable.parameter.function.4.nix
#                   ^ source.nix punctuation.definition.function.nix
#                    ^ source.nix
#                     ^ source.nix variable.parameter.function.4.nix
#                      ^ source.nix punctuation.definition.function.nix
#                       ^ source.nix
#                        ^^^^ source.nix variable.parameter.function.4.nix
#                            ^ source.nix punctuation.definition.function.nix
#                             ^ source.nix
#                              ^ source.nix variable.parameter.function.4.nix
#                               ^ source.nix punctuation.definition.function.nix
>    let arg = (merger init (defaultMergeArg init x));
#^^^^ source.nix
#    ^^^ source.nix keyword.other.nix
#       ^ source.nix
#        ^^^ source.nix entity.other.attribute-name.multipart.nix
#           ^ source.nix
#            ^ source.nix keyword.operator.bind.nix
#             ^ source.nix
#              ^ source.nix punctuation.definition.expression.nix
#               ^^^^^^ source.nix variable.parameter.name.nix
#                     ^ source.nix
#                      ^^^^ source.nix variable.parameter.name.nix
#                          ^ source.nix
#                           ^ source.nix punctuation.definition.expression.nix
#                            ^^^^^^^^^^^^^^^ source.nix variable.parameter.name.nix
#                                           ^ source.nix
#                                            ^^^^ source.nix variable.parameter.name.nix
#                                                ^ source.nix
#                                                 ^ source.nix variable.parameter.name.nix
#                                                  ^ source.nix punctuation.definition.expression.nix
#                                                   ^ source.nix punctuation.definition.expression.nix
#                                                    ^ source.nix punctuation.terminator.bind.nix
>        # now add the function with composed args already applied to the final attrs
#^^^^^^^^ source.nix
#        ^ source.nix comment.line.number-sign.nix
#         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix comment.line.number-sign.nix
>        base = (setAttrMerge "passthru" {} (f arg)
#^^^^^^^^ source.nix
#        ^^^^ source.nix entity.other.attribute-name.multipart.nix
#            ^ source.nix
#             ^ source.nix keyword.operator.bind.nix
#              ^ source.nix
#               ^ source.nix punctuation.definition.expression.nix
#                ^^^^^^^^^^^^ source.nix variable.parameter.name.nix
#                            ^ source.nix
#                             ^ source.nix string.quoted.double.nix punctuation.definition.string.double.start.nix
#                              ^^^^^^^^ source.nix string.quoted.double.nix
#                                      ^ source.nix string.quoted.double.nix punctuation.definition.string.double.end.nix
#                                       ^ source.nix
#                                        ^ source.nix punctuation.definition.attrset.nix
#                                         ^ source.nix punctuation.definition.attrset.nix
#                                          ^ source.nix
#                                           ^ source.nix punctuation.definition.expression.nix
#                                            ^ source.nix variable.parameter.name.nix
#                                             ^ source.nix
#                                              ^^^ source.nix variable.parameter.name.nix
#                                                 ^ source.nix punctuation.definition.expression.nix
>                        ( z: z // {__id_static="0.4553087592557379";__id_dynamic=builtins.hashFile "sha256" /Users/jeffhykin/repos/snowball/random.ignore;
#^^^^^^^^^^^^^^^^^^^^^^^^ source.nix
#                        ^ source.nix punctuation.definition.expression.nix
#                         ^ source.nix
#                          ^ source.nix variable.parameter.function.4.nix
#                           ^ source.nix punctuation.definition.function.nix
#                            ^ source.nix
#                             ^ source.nix variable.parameter.name.nix
#                              ^ source.nix
#                               ^^ source.nix keyword.operator.nix
#                                 ^ source.nix
#                                  ^ source.nix punctuation.definition.attrset.nix
#                                   ^^^^^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#                                              ^ source.nix keyword.operator.bind.nix
#                                               ^ source.nix string.quoted.double.nix punctuation.definition.string.double.start.nix
#                                                ^^^^^^^^^^^^^^^^^^ source.nix string.quoted.double.nix
#                                                                  ^ source.nix string.quoted.double.nix punctuation.definition.string.double.end.nix
#                                                                   ^ source.nix punctuation.terminator.bind.nix
#                                                                    ^^^^^^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#                                                                                ^ source.nix keyword.operator.bind.nix
#                                                                                 ^^^^^^^^ source.nix constant.language.nix
#                                                                                         ^ source.nix keyword.operator.nix
#                                                                                          ^^^^^^^^ source.nix variable.parameter.name.nix
#                                                                                                  ^ source.nix
#                                                                                                   ^ source.nix string.quoted.double.nix punctuation.definition.string.double.start.nix
#                                                                                                    ^^^^^^ source.nix string.quoted.double.nix
#                                                                                                          ^ source.nix string.quoted.double.nix punctuation.definition.string.double.end.nix
#                                                                                                           ^ source.nix
#                                                                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix string.unquoted.path.nix
#                                                                                                                                                         ^ source.nix punctuation.terminator.bind.nix
>
>                            function = foldArgs merger f arg;
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix
#                            ^^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#                                    ^ source.nix
#                                     ^ source.nix keyword.operator.bind.nix
#                                      ^ source.nix
#                                       ^^^^^^^^ source.nix variable.parameter.name.nix
#                                               ^ source.nix
#                                                ^^^^^^ source.nix variable.parameter.name.nix
#                                                      ^ source.nix
#                                                       ^ source.nix variable.parameter.name.nix
#                                                        ^ source.nix
#                                                         ^^^ source.nix variable.parameter.name.nix
#                                                            ^ source.nix punctuation.terminator.bind.nix
>                            args = (lib.attrByPath ["passthru" "args"] {} z) // x;
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix
#                            ^^^^ source.nix entity.other.attribute-name.multipart.nix
#                                ^ source.nix
#                                 ^ source.nix keyword.operator.bind.nix
#                                  ^ source.nix
#                                   ^ source.nix punctuation.definition.expression.nix
#                                    ^^^ source.nix variable.parameter.name.nix
#                                       ^ source.nix keyword.operator.nix
#                                        ^^^^^^^^^^ source.nix variable.parameter.name.nix
#                                                  ^ source.nix
#                                                   ^ source.nix punctuation.definition.list.nix
#                                                    ^ source.nix string.quoted.double.nix punctuation.definition.string.double.start.nix
#                                                     ^^^^^^^^ source.nix string.quoted.double.nix
#                                                             ^ source.nix string.quoted.double.nix punctuation.definition.string.double.end.nix
#                                                              ^ source.nix
#                                                               ^ source.nix string.quoted.double.nix punctuation.definition.string.double.start.nix
#                                                                ^^^^ source.nix string.quoted.double.nix
#                                                                    ^ source.nix string.quoted.double.nix punctuation.definition.string.double.end.nix
#                                                                     ^ source.nix punctuation.definition.list.nix
#                                                                      ^ source.nix
#                                                                       ^ source.nix punctuation.definition.attrset.nix
#                                                                        ^ source.nix punctuation.definition.attrset.nix
#                                                                         ^ source.nix
#                                                                          ^ source.nix variable.parameter.name.nix
#                                                                           ^ source.nix punctuation.definition.expression.nix
#                                                                            ^ source.nix
#                                                                             ^^ source.nix keyword.operator.nix
#                                                                               ^ source.nix
#                                                                                ^ source.nix variable.parameter.name.nix
#                                                                                 ^ source.nix punctuation.terminator.bind.nix
>                          } ));
#^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix
#                          ^ source.nix punctuation.definition.attrset.nix
#                           ^ source.nix
#                            ^ source.nix punctuation.definition.expression.nix
#                             ^ source.nix punctuation.definition.expression.nix
#                              ^ source.nix punctuation.terminator.bind.nix
>        withStdOverrides = base // {__id_static="0.8985474209071187";__id_dynamic=builtins.hashFile "sha256" /Users/jeffhykin/repos/snowball/random.ignore;
#^^^^^^^^ source.nix
#        ^^^^^^^^^^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#                        ^ source.nix
#                         ^ source.nix keyword.operator.bind.nix
#                          ^ source.nix
#                           ^^^^ source.nix variable.parameter.name.nix
#                               ^ source.nix
#                                ^^ source.nix keyword.operator.nix
#                                  ^ source.nix
#                                   ^ source.nix punctuation.definition.attrset.nix
#                                    ^^^^^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#                                               ^ source.nix keyword.operator.bind.nix
#                                                ^ source.nix string.quoted.double.nix punctuation.definition.string.double.start.nix
#                                                 ^^^^^^^^^^^^^^^^^^ source.nix string.quoted.double.nix
#                                                                   ^ source.nix string.quoted.double.nix punctuation.definition.string.double.end.nix
#                                                                    ^ source.nix punctuation.terminator.bind.nix
#                                                                     ^^^^^^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#                                                                                 ^ source.nix keyword.operator.bind.nix
#                                                                                  ^^^^^^^^ source.nix constant.language.nix
#                                                                                          ^ source.nix keyword.operator.nix
#                                                                                           ^^^^^^^^ source.nix variable.parameter.name.nix
#                                                                                                   ^ source.nix
#                                                                                                    ^ source.nix string.quoted.double.nix punctuation.definition.string.double.start.nix
#                                                                                                     ^^^^^^ source.nix string.quoted.double.nix
#                                                                                                           ^ source.nix string.quoted.double.nix punctuation.definition.string.double.end.nix
#                                                                                                            ^ source.nix
#                                                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix string.unquoted.path.nix
#                                                                                                                                                          ^ source.nix punctuation.terminator.bind.nix
>
>          override = base.passthru.function;
#^^^^^^^^^^ source.nix
#          ^^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#                  ^ source.nix
#                   ^ source.nix keyword.operator.bind.nix
#                    ^ source.nix
#                     ^^^^ source.nix variable.parameter.name.nix
#                         ^ source.nix keyword.operator.nix
#                          ^^^^^^^^ source.nix variable.parameter.name.nix
#                                  ^ source.nix keyword.operator.nix
#                                   ^^^^^^^^ source.nix variable.parameter.name.nix
#                                           ^ source.nix punctuation.terminator.bind.nix
>        };
#^^^^^^^^ source.nix
#        ^ source.nix punctuation.definition.attrset.nix
#         ^ source.nix punctuation.terminator.bind.nix
>        in
#^^^^^^^^ source.nix
#        ^^ source.nix keyword.other.nix
>          withStdOverrides;
#^^^^^^^^^^ source.nix
#          ^^^^^^^^^^^^^^^^ source.nix variable.parameter.name.nix
#                          ^ source.nix punctuation.terminator.bind.nix
>
>
>  # shortcut for attrByPath ["name"] default attrs
#^^ source.nix
#  ^ source.nix comment.line.number-sign.nix
#   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix comment.line.number-sign.nix
>  maybeAttrNullable = maybeAttr;
#^^ source.nix
#  ^^^^^^^^^^^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#                   ^ source.nix
#                    ^ source.nix keyword.operator.bind.nix
#                     ^ source.nix
#                      ^^^^^^^^^ source.nix variable.parameter.name.nix
#                               ^ source.nix punctuation.terminator.bind.nix
>
>  # shortcut for attrByPath ["name"] default attrs
#^^ source.nix
#  ^ source.nix comment.line.number-sign.nix
#   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix comment.line.number-sign.nix
>  maybeAttr = name: default: attrs: attrs.${name} or default;
#^^ source.nix
#  ^^^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#           ^ source.nix
#            ^ source.nix keyword.operator.bind.nix
#             ^ source.nix
#              ^^^^ source.nix variable.parameter.function.4.nix
#                  ^ source.nix punctuation.definition.function.nix
#                   ^ source.nix
#                    ^^^^^^^ source.nix variable.parameter.function.4.nix
#                           ^ source.nix punctuation.definition.function.nix
#                            ^ source.nix
#                             ^^^^^ source.nix variable.parameter.function.4.nix
#                                  ^ source.nix punctuation.definition.function.nix
#                                   ^ source.nix
#                                    ^^^^^ source.nix variable.parameter.name.nix
#                                         ^ source.nix keyword.operator.nix
#                                          ^^ source.nix meta.embedded punctuation.section.embedded.begin.nix
#                                            ^^^^ source.nix meta.embedded variable.parameter.name.nix
#                                                ^ source.nix meta.embedded punctuation.section.embedded.end.nix
#                                                 ^ source.nix
#                                                  ^^ source.nix keyword.operator.nix
#                                                    ^ source.nix
#                                                     ^^^^^^^ source.nix variable.parameter.name.nix
#                                                            ^ source.nix punctuation.terminator.bind.nix
>
>
>  # Return the second argument if the first one is true or the empty version
#^^ source.nix
#  ^ source.nix comment.line.number-sign.nix
#   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix comment.line.number-sign.nix
>  # of the second argument.
#^^ source.nix
#  ^ source.nix comment.line.number-sign.nix
#   ^^^^^^^^^^^^^^^^^^^^^^^^ source.nix comment.line.number-sign.nix
>  ifEnable = cond: val:
#^^ source.nix
#  ^^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#          ^ source.nix
#           ^ source.nix keyword.operator.bind.nix
#            ^ source.nix
#             ^^^^ source.nix variable.parameter.function.4.nix
#                 ^ source.nix punctuation.definition.function.nix
#                  ^ source.nix
#                   ^^^ source.nix variable.parameter.function.4.nix
#                      ^ source.nix punctuation.definition.function.nix
>    if cond then val
#^^^^ source.nix
#    ^^ source.nix keyword.other.nix
#      ^ source.nix
#       ^^^^ source.nix variable.parameter.name.nix
#           ^ source.nix
#            ^^ source.nix keyword.other.nix
#              ^^ source.nix keyword.other.nix
#                ^ source.nix
#                 ^^^ source.nix variable.parameter.name.nix
>    else if builtins.isList val then []
#^^^^ source.nix
#    ^^ source.nix keyword.other.nix
#      ^^ source.nix keyword.other.nix
#        ^ source.nix
#         ^^ source.nix keyword.other.nix
#           ^ source.nix
#            ^^^^^^^^ source.nix constant.language.nix
#                    ^ source.nix keyword.operator.nix
#                     ^^^^^^ source.nix variable.parameter.name.nix
#                           ^ source.nix
#                            ^^^ source.nix variable.parameter.name.nix
#                               ^ source.nix
#                                ^^ source.nix keyword.other.nix
#                                  ^^ source.nix keyword.other.nix
#                                    ^ source.nix
#                                     ^ source.nix punctuation.definition.list.nix
#                                      ^ source.nix punctuation.definition.list.nix
>    else if builtins.isAttrs val then {}
#^^^^ source.nix
#    ^^ source.nix keyword.other.nix
#      ^^ source.nix keyword.other.nix
#        ^ source.nix
#         ^^ source.nix keyword.other.nix
#           ^ source.nix
#            ^^^^^^^^ source.nix constant.language.nix
#                    ^ source.nix keyword.operator.nix
#                     ^^^^^^^ source.nix variable.parameter.name.nix
#                            ^ source.nix
#                             ^^^ source.nix variable.parameter.name.nix
#                                ^ source.nix
#                                 ^^ source.nix keyword.other.nix
#                                   ^^ source.nix keyword.other.nix
#                                     ^ source.nix
#                                      ^ source.nix punctuation.definition.attrset.nix
#                                       ^ source.nix punctuation.definition.attrset.nix
>    # else if builtins.isString val then ""
#^^^^ source.nix
#    ^ source.nix comment.line.number-sign.nix
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix comment.line.number-sign.nix
>    else if val == true || val == false then false
#^^^^ source.nix
#    ^^ source.nix keyword.other.nix
#      ^^ source.nix keyword.other.nix
#        ^ source.nix
#         ^^ source.nix keyword.other.nix
#           ^ source.nix
#            ^^^ source.nix variable.parameter.name.nix
#               ^ source.nix
#                ^^ source.nix keyword.operator.nix
#                  ^ source.nix
#                   ^^^^ source.nix constant.language.nix
#                       ^ source.nix
#                        ^^ source.nix keyword.operator.nix
#                          ^ source.nix
#                           ^^^ source.nix variable.parameter.name.nix
#                              ^ source.nix
#                               ^^ source.nix keyword.operator.nix
#                                 ^ source.nix
#                                  ^^^^^ source.nix constant.language.nix
#                                       ^ source.nix
#                                        ^^ source.nix keyword.other.nix
#                                          ^^ source.nix keyword.other.nix
#                                            ^ source.nix
#                                             ^^^^^ source.nix constant.language.nix
>    else null;
#^^^^ source.nix
#    ^^ source.nix keyword.other.nix
#      ^^ source.nix keyword.other.nix
#        ^ source.nix
#         ^^^^ source.nix constant.language.nix
#             ^ source.nix punctuation.terminator.bind.nix
>
>
>  # Return true only if there is an attribute and it is true.
#^^ source.nix
#  ^ source.nix comment.line.number-sign.nix
#   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix comment.line.number-sign.nix
>  checkFlag = attrSet: name:
#^^ source.nix
#  ^^^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#           ^ source.nix
#            ^ source.nix keyword.operator.bind.nix
#             ^ source.nix
#              ^^^^^^^ source.nix variable.parameter.function.4.nix
#                     ^ source.nix punctuation.definition.function.nix
#                      ^ source.nix
#                       ^^^^ source.nix variable.parameter.function.4.nix
#                           ^ source.nix punctuation.definition.function.nix
>        if name == "true" then true else
#^^^^^^^^ source.nix
#        ^^ source.nix keyword.other.nix
#          ^ source.nix
#           ^^^^ source.nix variable.parameter.name.nix
#               ^ source.nix
#                ^^ source.nix keyword.operator.nix
#                  ^ source.nix
#                   ^ source.nix string.quoted.double.nix punctuation.definition.string.double.start.nix
#                    ^^^^ source.nix string.quoted.double.nix
#                        ^ source.nix string.quoted.double.nix punctuation.definition.string.double.end.nix
#                         ^ source.nix
#                          ^^ source.nix keyword.other.nix
#                            ^^ source.nix keyword.other.nix
#                              ^ source.nix
#                               ^^^^ source.nix constant.language.nix
#                                   ^ source.nix
#                                    ^^ source.nix keyword.other.nix
#                                      ^^ source.nix keyword.other.nix
>        if name == "false" then false else
#^^^^^^^^ source.nix
#        ^^ source.nix keyword.other.nix
#          ^ source.nix
#           ^^^^ source.nix variable.parameter.name.nix
#               ^ source.nix
#                ^^ source.nix keyword.operator.nix
#                  ^ source.nix
#                   ^ source.nix string.quoted.double.nix punctuation.definition.string.double.start.nix
#                    ^^^^^ source.nix string.quoted.double.nix
#                         ^ source.nix string.quoted.double.nix punctuation.definition.string.double.end.nix
#                          ^ source.nix
#                           ^^ source.nix keyword.other.nix
#                             ^^ source.nix keyword.other.nix
#                               ^ source.nix
#                                ^^^^^ source.nix constant.language.nix
#                                     ^ source.nix
#                                      ^^ source.nix keyword.other.nix
#                                        ^^ source.nix keyword.other.nix
>        if (elem name (attrByPath ["flags"] [] attrSet)) then true else
#^^^^^^^^ source.nix
#        ^^ source.nix keyword.other.nix
#          ^ source.nix
#           ^ source.nix punctuation.definition.expression.nix
#            ^^^^ source.nix variable.parameter.name.nix
#                ^ source.nix
#                 ^^^^ source.nix variable.parameter.name.nix
#                     ^ source.nix
#                      ^ source.nix punctuation.definition.expression.nix
#                       ^^^^^^^^^^ source.nix variable.parameter.name.nix
#                                 ^ source.nix
#                                  ^ source.nix punctuation.definition.list.nix
#                                   ^ source.nix string.quoted.double.nix punctuation.definition.string.double.start.nix
#                                    ^^^^^ source.nix string.quoted.double.nix
#                                         ^ source.nix string.quoted.double.nix punctuation.definition.string.double.end.nix
#                                          ^ source.nix punctuation.definition.list.nix
#                                           ^ source.nix
#                                            ^ source.nix punctuation.definition.list.nix
#                                             ^ source.nix punctuation.definition.list.nix
#                                              ^ source.nix
#                                               ^^^^^^^ source.nix variable.parameter.name.nix
#                                                      ^ source.nix punctuation.definition.expression.nix
#                                                       ^ source.nix punctuation.definition.expression.nix
#                                                        ^ source.nix
#                                                         ^^ source.nix keyword.other.nix
#                                                           ^^ source.nix keyword.other.nix
#                                                             ^ source.nix
#                                                              ^^^^ source.nix constant.language.nix
#                                                                  ^ source.nix
#                                                                   ^^ source.nix keyword.other.nix
#                                                                     ^^ source.nix keyword.other.nix
>        attrByPath [name] false attrSet ;
#^^^^^^^^ source.nix
#        ^^^^^^^^^^ source.nix variable.parameter.name.nix
#                  ^ source.nix
#                   ^ source.nix punctuation.definition.list.nix
#                    ^^^^ source.nix variable.parameter.name.nix
#                        ^ source.nix punctuation.definition.list.nix
#                         ^ source.nix
#                          ^^^^^ source.nix constant.language.nix
#                               ^ source.nix
#                                ^^^^^^^ source.nix variable.parameter.name.nix
#                                       ^ source.nix
#                                        ^ source.nix punctuation.terminator.bind.nix
>
>
>  # Input : attrSet, [ [name default] ... ], name
#^^ source.nix
#  ^ source.nix comment.line.number-sign.nix
#   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix comment.line.number-sign.nix
>  # Output : its value or default.
#^^ source.nix
#  ^ source.nix comment.line.number-sign.nix
#   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix comment.line.number-sign.nix
>  getValue = attrSet: argList: name:
#^^ source.nix
#  ^^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#          ^ source.nix
#           ^ source.nix keyword.operator.bind.nix
#            ^ source.nix
#             ^^^^^^^ source.nix variable.parameter.function.4.nix
#                    ^ source.nix punctuation.definition.function.nix
#                     ^ source.nix
#                      ^^^^^^^ source.nix variable.parameter.function.4.nix
#                             ^ source.nix punctuation.definition.function.nix
#                              ^ source.nix
#                               ^^^^ source.nix variable.parameter.function.4.nix
#                                   ^ source.nix punctuation.definition.function.nix
>  ( attrByPath [name] (if checkFlag attrSet name then true else
#^^ source.nix
#  ^ source.nix punctuation.definition.expression.nix
#   ^ source.nix
#    ^^^^^^^^^^ source.nix variable.parameter.name.nix
#              ^ source.nix
#               ^ source.nix punctuation.definition.list.nix
#                ^^^^ source.nix variable.parameter.name.nix
#                    ^ source.nix punctuation.definition.list.nix
#                     ^ source.nix
#                      ^ source.nix punctuation.definition.expression.nix
#                       ^^ source.nix keyword.other.nix
#                         ^ source.nix
#                          ^^^^^^^^^ source.nix variable.parameter.name.nix
#                                   ^ source.nix
#                                    ^^^^^^^ source.nix variable.parameter.name.nix
#                                           ^ source.nix
#                                            ^^^^ source.nix variable.parameter.name.nix
#                                                ^ source.nix
#                                                 ^^ source.nix keyword.other.nix
#                                                   ^^ source.nix keyword.other.nix
#                                                     ^ source.nix
#                                                      ^^^^ source.nix constant.language.nix
#                                                          ^ source.nix
#                                                           ^^ source.nix keyword.other.nix
#                                                             ^^ source.nix keyword.other.nix
>        if argList == [] then null else
#^^^^^^^^ source.nix
#        ^^ source.nix keyword.other.nix
#          ^ source.nix
#           ^^^^^^^ source.nix variable.parameter.name.nix
#                  ^ source.nix
#                   ^^ source.nix keyword.operator.nix
#                     ^ source.nix
#                      ^ source.nix punctuation.definition.list.nix
#                       ^ source.nix punctuation.definition.list.nix
#                        ^ source.nix
#                         ^^ source.nix keyword.other.nix
#                           ^^ source.nix keyword.other.nix
#                             ^ source.nix
#                              ^^^^ source.nix constant.language.nix
#                                  ^ source.nix
#                                   ^^ source.nix keyword.other.nix
#                                     ^^ source.nix keyword.other.nix
>        let x = builtins.head argList; in
#^^^^^^^^ source.nix
#        ^^^ source.nix keyword.other.nix
#           ^ source.nix
#            ^ source.nix entity.other.attribute-name.multipart.nix
#             ^ source.nix
#              ^ source.nix keyword.operator.bind.nix
#               ^ source.nix
#                ^^^^^^^^ source.nix constant.language.nix
#                        ^ source.nix keyword.operator.nix
#                         ^^^^ source.nix variable.parameter.name.nix
#                             ^ source.nix
#                              ^^^^^^^ source.nix variable.parameter.name.nix
#                                     ^ source.nix punctuation.terminator.bind.nix
#                                      ^ source.nix
#                                       ^^ source.nix keyword.other.nix
>                if (head x) == name then
#^^^^^^^^^^^^^^^^ source.nix
#                ^^ source.nix keyword.other.nix
#                  ^ source.nix
#                   ^ source.nix punctuation.definition.expression.nix
#                    ^^^^ source.nix variable.parameter.name.nix
#                        ^ source.nix
#                         ^ source.nix variable.parameter.name.nix
#                          ^ source.nix punctuation.definition.expression.nix
#                           ^ source.nix
#                            ^^ source.nix keyword.operator.nix
#                              ^ source.nix
#                               ^^^^ source.nix variable.parameter.name.nix
#                                   ^ source.nix
#                                    ^^ source.nix keyword.other.nix
#                                      ^^ source.nix keyword.other.nix
>                        (head (tail x))
#^^^^^^^^^^^^^^^^^^^^^^^^ source.nix
#                        ^ source.nix punctuation.definition.expression.nix
#                         ^^^^ source.nix variable.parameter.name.nix
#                             ^ source.nix
#                              ^ source.nix punctuation.definition.expression.nix
#                               ^^^^ source.nix variable.parameter.name.nix
#                                   ^ source.nix
#                                    ^ source.nix variable.parameter.name.nix
#                                     ^ source.nix punctuation.definition.expression.nix
#                                      ^ source.nix punctuation.definition.expression.nix
>                else (getValue attrSet
#^^^^^^^^^^^^^^^^ source.nix
#                ^^ source.nix keyword.other.nix
#                  ^^ source.nix keyword.other.nix
#                    ^ source.nix
#                     ^ source.nix punctuation.definition.expression.nix
#                      ^^^^^^^^ source.nix variable.parameter.name.nix
#                              ^ source.nix
#                               ^^^^^^^ source.nix variable.parameter.name.nix
>                        (tail argList) name)) attrSet );
#^^^^^^^^^^^^^^^^^^^^^^^^ source.nix
#                        ^ source.nix punctuation.definition.expression.nix
#                         ^^^^ source.nix variable.parameter.name.nix
#                             ^ source.nix
#                              ^^^^^^^ source.nix variable.parameter.name.nix
#                                     ^ source.nix punctuation.definition.expression.nix
#                                      ^ source.nix
#                                       ^^^^ source.nix variable.parameter.name.nix
#                                           ^ source.nix punctuation.definition.expression.nix
#                                            ^ source.nix punctuation.definition.expression.nix
#                                             ^ source.nix
#                                              ^^^^^^^ source.nix variable.parameter.name.nix
#                                                     ^ source.nix
#                                                      ^ source.nix punctuation.definition.expression.nix
#                                                       ^ source.nix punctuation.terminator.bind.nix
>
>
>  # Input : attrSet, [[name default] ...], [ [flagname reqs..] ... ]
#^^ source.nix
#  ^ source.nix comment.line.number-sign.nix
#   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix comment.line.number-sign.nix
>  # Output : are reqs satisfied? It's asserted.
#^^ source.nix
#  ^ source.nix comment.line.number-sign.nix
#   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix comment.line.number-sign.nix
>  checkReqs = attrSet: argList: condList:
#^^ source.nix
#  ^^^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#           ^ source.nix
#            ^ source.nix keyword.operator.bind.nix
#             ^ source.nix
#              ^^^^^^^ source.nix variable.parameter.function.4.nix
#                     ^ source.nix punctuation.definition.function.nix
#                      ^ source.nix
#                       ^^^^^^^ source.nix variable.parameter.function.4.nix
#                              ^ source.nix punctuation.definition.function.nix
#                               ^ source.nix
#                                ^^^^^^^^ source.nix variable.parameter.function.4.nix
#                                        ^ source.nix punctuation.definition.function.nix
>  (
#^^ source.nix
#  ^ source.nix punctuation.definition.expression.nix
>    foldr lib.and true
#^^^^ source.nix
#    ^^^^^ source.nix variable.parameter.name.nix
#         ^ source.nix
#          ^^^ source.nix variable.parameter.name.nix
#             ^ source.nix keyword.operator.nix
#              ^^^ source.nix variable.parameter.name.nix
#                 ^ source.nix
#                  ^^^^ source.nix constant.language.nix
>      (map (x: let name = (head x); in
#^^^^^^ source.nix
#      ^ source.nix punctuation.definition.expression.nix
#       ^^^ source.nix support.function.nix
#          ^ source.nix
#           ^ source.nix punctuation.definition.expression.nix
#            ^ source.nix variable.parameter.function.4.nix
#             ^ source.nix punctuation.definition.function.nix
#              ^ source.nix
#               ^^^ source.nix keyword.other.nix
#                  ^ source.nix
#                   ^^^^ source.nix entity.other.attribute-name.multipart.nix
#                       ^ source.nix
#                        ^ source.nix keyword.operator.bind.nix
#                         ^ source.nix
#                          ^ source.nix punctuation.definition.expression.nix
#                           ^^^^ source.nix variable.parameter.name.nix
#                               ^ source.nix
#                                ^ source.nix variable.parameter.name.nix
#                                 ^ source.nix punctuation.definition.expression.nix
#                                  ^ source.nix punctuation.terminator.bind.nix
#                                   ^ source.nix
#                                    ^^ source.nix keyword.other.nix
>
>        ((checkFlag attrSet name) ->
#^^^^^^^^ source.nix
#        ^ source.nix punctuation.definition.expression.nix
#         ^ source.nix punctuation.definition.expression.nix
#          ^^^^^^^^^ source.nix variable.parameter.name.nix
#                   ^ source.nix
#                    ^^^^^^^ source.nix variable.parameter.name.nix
#                           ^ source.nix
#                            ^^^^ source.nix variable.parameter.name.nix
#                                ^ source.nix punctuation.definition.expression.nix
#                                 ^ source.nix
#                                  ^^ source.nix keyword.operator.nix
>        (foldr lib.and true
#^^^^^^^^ source.nix
#        ^ source.nix punctuation.definition.expression.nix
#         ^^^^^ source.nix variable.parameter.name.nix
#              ^ source.nix
#               ^^^ source.nix variable.parameter.name.nix
#                  ^ source.nix keyword.operator.nix
#                   ^^^ source.nix variable.parameter.name.nix
#                      ^ source.nix
#                       ^^^^ source.nix constant.language.nix
>        (map (y: let val=(getValue attrSet argList y); in
#^^^^^^^^ source.nix
#        ^ source.nix punctuation.definition.expression.nix
#         ^^^ source.nix support.function.nix
#            ^ source.nix
#             ^ source.nix punctuation.definition.expression.nix
#              ^ source.nix variable.parameter.function.4.nix
#               ^ source.nix punctuation.definition.function.nix
#                ^ source.nix
#                 ^^^ source.nix keyword.other.nix
#                    ^ source.nix
#                     ^^^ source.nix entity.other.attribute-name.multipart.nix
#                        ^ source.nix keyword.operator.bind.nix
#                         ^ source.nix punctuation.definition.expression.nix
#                          ^^^^^^^^ source.nix variable.parameter.name.nix
#                                  ^ source.nix
#                                   ^^^^^^^ source.nix variable.parameter.name.nix
#                                          ^ source.nix
#                                           ^^^^^^^ source.nix variable.parameter.name.nix
#                                                  ^ source.nix
#                                                   ^ source.nix variable.parameter.name.nix
#                                                    ^ source.nix punctuation.definition.expression.nix
#                                                     ^ source.nix punctuation.terminator.bind.nix
#                                                      ^ source.nix
#                                                       ^^ source.nix keyword.other.nix
>                (val!=null) && (val!=false))
#^^^^^^^^^^^^^^^^ source.nix
#                ^ source.nix punctuation.definition.expression.nix
#                 ^^^ source.nix variable.parameter.name.nix
#                    ^^ source.nix keyword.operator.nix
#                      ^^^^ source.nix constant.language.nix
#                          ^ source.nix punctuation.definition.expression.nix
#                           ^ source.nix
#                            ^^ source.nix keyword.operator.nix
#                              ^ source.nix
#                               ^ source.nix punctuation.definition.expression.nix
#                                ^^^ source.nix variable.parameter.name.nix
#                                   ^^ source.nix keyword.operator.nix
#                                     ^^^^^ source.nix constant.language.nix
#                                          ^ source.nix punctuation.definition.expression.nix
#                                           ^ source.nix punctuation.definition.expression.nix
>        (tail x))))) condList));
#^^^^^^^^ source.nix
#        ^ source.nix punctuation.definition.expression.nix
#         ^^^^ source.nix variable.parameter.name.nix
#             ^ source.nix
#              ^ source.nix variable.parameter.name.nix
#               ^ source.nix punctuation.definition.expression.nix
#                ^ source.nix punctuation.definition.expression.nix
#                 ^ source.nix punctuation.definition.expression.nix
#                  ^ source.nix punctuation.definition.expression.nix
#                   ^ source.nix punctuation.definition.expression.nix
#                    ^ source.nix
#                     ^^^^^^^^ source.nix variable.parameter.name.nix
#                             ^ source.nix punctuation.definition.expression.nix
#                              ^ source.nix punctuation.definition.expression.nix
#                               ^ source.nix punctuation.terminator.bind.nix
>
>
>  # This function has O(n^2) performance.
#^^ source.nix
#  ^ source.nix comment.line.number-sign.nix
#   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix comment.line.number-sign.nix
>  uniqList = { inputList, acc ? [] }:
#^^ source.nix
#  ^^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#          ^ source.nix
#           ^ source.nix keyword.operator.bind.nix
#            ^ source.nix
#             ^ source.nix punctuation.definition.entity.function.2.nix
#              ^ source.nix
#               ^^^^^^^^^ source.nix variable.parameter.function.1.nix
#                        ^ source.nix keyword.operator.nix
#                         ^ source.nix
#                          ^^^ source.nix variable.parameter.function.1.nix
#                             ^ source.nix
#                              ^ source.nix keyword.operator.nix
#                               ^ source.nix
#                                ^ source.nix punctuation.definition.list.nix
#                                 ^ source.nix punctuation.definition.list.nix
#                                  ^ source.nix
#                                   ^ source.nix punctuation.definition.entity.function.nix
#                                    ^ source.nix punctuation.definition.function.nix
>    let go = xs: acc:
#^^^^ source.nix
#    ^^^ source.nix keyword.other.nix
#       ^ source.nix
#        ^^ source.nix entity.other.attribute-name.multipart.nix
#          ^ source.nix
#           ^ source.nix keyword.operator.bind.nix
#            ^ source.nix
#             ^^ source.nix variable.parameter.function.4.nix
#               ^ source.nix punctuation.definition.function.nix
#                ^ source.nix
#                 ^^^ source.nix variable.parameter.function.4.nix
#                    ^ source.nix punctuation.definition.function.nix
>             if xs == []
#^^^^^^^^^^^^^ source.nix
#             ^^ source.nix keyword.other.nix
#               ^ source.nix
#                ^^ source.nix variable.parameter.name.nix
#                  ^ source.nix
#                   ^^ source.nix keyword.operator.nix
#                     ^ source.nix
#                      ^ source.nix punctuation.definition.list.nix
#                       ^ source.nix punctuation.definition.list.nix
>             then []
#^^^^^^^^^^^^^ source.nix
#             ^^ source.nix keyword.other.nix
#               ^^ source.nix keyword.other.nix
#                 ^ source.nix
#                  ^ source.nix punctuation.definition.list.nix
#                   ^ source.nix punctuation.definition.list.nix
>             else let x = head xs;
#^^^^^^^^^^^^^ source.nix
#             ^^ source.nix keyword.other.nix
#               ^^ source.nix keyword.other.nix
#                 ^ source.nix
#                  ^^^ source.nix keyword.other.nix
#                     ^ source.nix
#                      ^ source.nix entity.other.attribute-name.multipart.nix
#                       ^ source.nix
#                        ^ source.nix keyword.operator.bind.nix
#                         ^ source.nix
#                          ^^^^ source.nix variable.parameter.name.nix
#                              ^ source.nix
#                               ^^ source.nix variable.parameter.name.nix
#                                 ^ source.nix punctuation.terminator.bind.nix
>                      y = if elem x acc then [] else [x];
#^^^^^^^^^^^^^^^^^^^^^^ source.nix
#                      ^ source.nix entity.other.attribute-name.multipart.nix
#                       ^ source.nix
#                        ^ source.nix keyword.operator.bind.nix
#                         ^ source.nix
#                          ^^ source.nix keyword.other.nix
#                            ^ source.nix
#                             ^^^^ source.nix variable.parameter.name.nix
#                                 ^ source.nix
#                                  ^ source.nix variable.parameter.name.nix
#                                   ^ source.nix
#                                    ^^^ source.nix variable.parameter.name.nix
#                                       ^ source.nix
#                                        ^^ source.nix keyword.other.nix
#                                          ^^ source.nix keyword.other.nix
#                                            ^ source.nix
#                                             ^ source.nix punctuation.definition.list.nix
#                                              ^ source.nix punctuation.definition.list.nix
#                                               ^ source.nix
#                                                ^^ source.nix keyword.other.nix
#                                                  ^^ source.nix keyword.other.nix
#                                                    ^ source.nix
#                                                     ^ source.nix punctuation.definition.list.nix
#                                                      ^ source.nix variable.parameter.name.nix
#                                                       ^ source.nix punctuation.definition.list.nix
#                                                        ^ source.nix punctuation.terminator.bind.nix
>                  in y ++ go (tail xs) (y ++ acc);
#^^^^^^^^^^^^^^^^^^ source.nix
#                  ^^ source.nix keyword.other.nix
#                    ^ source.nix
#                     ^ source.nix variable.parameter.name.nix
#                      ^ source.nix
#                       ^^ source.nix keyword.operator.nix
#                         ^ source.nix
#                          ^^ source.nix variable.parameter.name.nix
#                            ^ source.nix
#                             ^ source.nix punctuation.definition.expression.nix
#                              ^^^^ source.nix variable.parameter.name.nix
#                                  ^ source.nix
#                                   ^^ source.nix variable.parameter.name.nix
#                                     ^ source.nix punctuation.definition.expression.nix
#                                      ^ source.nix
#                                       ^ source.nix punctuation.definition.expression.nix
#                                        ^ source.nix variable.parameter.name.nix
#                                         ^ source.nix
#                                          ^^ source.nix keyword.operator.nix
#                                            ^ source.nix
#                                             ^^^ source.nix variable.parameter.name.nix
#                                                ^ source.nix punctuation.definition.expression.nix
#                                                 ^ source.nix punctuation.terminator.bind.nix
>    in go inputList acc;
#^^^^ source.nix
#    ^^ source.nix keyword.other.nix
#      ^ source.nix
#       ^^ source.nix variable.parameter.name.nix
#         ^ source.nix
#          ^^^^^^^^^ source.nix variable.parameter.name.nix
#                   ^ source.nix
#                    ^^^ source.nix variable.parameter.name.nix
#                       ^ source.nix punctuation.terminator.bind.nix
>
>  uniqListExt = { inputList,
#^^ source.nix
#  ^^^^^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#             ^ source.nix
#              ^ source.nix keyword.operator.bind.nix
#               ^ source.nix
#                ^ source.nix punctuation.definition.entity.function.2.nix
#                 ^ source.nix
#                  ^^^^^^^^^ source.nix variable.parameter.function.1.nix
#                           ^ source.nix keyword.operator.nix
>                  outputList ? [],
#^^^^^^^^^^^^^^^^^^ source.nix
#                  ^^^^^^^^^^ source.nix variable.parameter.function.1.nix
#                            ^ source.nix
#                             ^ source.nix keyword.operator.nix
#                              ^ source.nix
#                               ^ source.nix punctuation.definition.list.nix
#                                ^ source.nix punctuation.definition.list.nix
#                                 ^ source.nix keyword.operator.nix
>                  getter ? (x: x),
#^^^^^^^^^^^^^^^^^^ source.nix
#                  ^^^^^^ source.nix variable.parameter.function.1.nix
#                        ^ source.nix
#                         ^ source.nix keyword.operator.nix
#                          ^ source.nix
#                           ^ source.nix punctuation.definition.expression.nix
#                            ^ source.nix variable.parameter.function.4.nix
#                             ^ source.nix punctuation.definition.function.nix
#                              ^ source.nix
#                               ^ source.nix variable.parameter.name.nix
#                                ^ source.nix punctuation.definition.expression.nix
#                                 ^ source.nix keyword.operator.nix
>                  compare ? (x: y: x==y) }:
#^^^^^^^^^^^^^^^^^^ source.nix
#                  ^^^^^^^ source.nix variable.parameter.function.1.nix
#                         ^ source.nix
#                          ^ source.nix keyword.operator.nix
#                           ^ source.nix
#                            ^ source.nix punctuation.definition.expression.nix
#                             ^ source.nix variable.parameter.function.4.nix
#                              ^ source.nix punctuation.definition.function.nix
#                               ^ source.nix
#                                ^ source.nix variable.parameter.function.4.nix
#                                 ^ source.nix punctuation.definition.function.nix
#                                  ^ source.nix
#                                   ^ source.nix variable.parameter.name.nix
#                                    ^^ source.nix keyword.operator.nix
#                                      ^ source.nix variable.parameter.name.nix
#                                       ^ source.nix punctuation.definition.expression.nix
#                                        ^ source.nix
#                                         ^ source.nix punctuation.definition.entity.function.nix
#                                          ^ source.nix punctuation.definition.function.nix
>        if inputList == [] then outputList else
#^^^^^^^^ source.nix
#        ^^ source.nix keyword.other.nix
#          ^ source.nix
#           ^^^^^^^^^ source.nix variable.parameter.name.nix
#                    ^ source.nix
#                     ^^ source.nix keyword.operator.nix
#                       ^ source.nix
#                        ^ source.nix punctuation.definition.list.nix
#                         ^ source.nix punctuation.definition.list.nix
#                          ^ source.nix
#                           ^^ source.nix keyword.other.nix
#                             ^^ source.nix keyword.other.nix
#                               ^ source.nix
#                                ^^^^^^^^^^ source.nix variable.parameter.name.nix
#                                          ^ source.nix
#                                           ^^ source.nix keyword.other.nix
#                                             ^^ source.nix keyword.other.nix
>        let x = head inputList;
#^^^^^^^^ source.nix
#        ^^^ source.nix keyword.other.nix
#           ^ source.nix
#            ^ source.nix entity.other.attribute-name.multipart.nix
#             ^ source.nix
#              ^ source.nix keyword.operator.bind.nix
#               ^ source.nix
#                ^^^^ source.nix variable.parameter.name.nix
#                    ^ source.nix
#                     ^^^^^^^^^ source.nix variable.parameter.name.nix
#                              ^ source.nix punctuation.terminator.bind.nix
>            isX = y: (compare (getter y) (getter x));
#^^^^^^^^^^^^ source.nix
#            ^^^ source.nix entity.other.attribute-name.multipart.nix
#               ^ source.nix
#                ^ source.nix keyword.operator.bind.nix
#                 ^ source.nix
#                  ^ source.nix variable.parameter.function.4.nix
#                   ^ source.nix punctuation.definition.function.nix
#                    ^ source.nix
#                     ^ source.nix punctuation.definition.expression.nix
#                      ^^^^^^^ source.nix variable.parameter.name.nix
#                             ^ source.nix
#                              ^ source.nix punctuation.definition.expression.nix
#                               ^^^^^^ source.nix variable.parameter.name.nix
#                                     ^ source.nix
#                                      ^ source.nix variable.parameter.name.nix
#                                       ^ source.nix punctuation.definition.expression.nix
#                                        ^ source.nix
#                                         ^ source.nix punctuation.definition.expression.nix
#                                          ^^^^^^ source.nix variable.parameter.name.nix
#                                                ^ source.nix
#                                                 ^ source.nix variable.parameter.name.nix
#                                                  ^ source.nix punctuation.definition.expression.nix
#                                                   ^ source.nix punctuation.definition.expression.nix
#                                                    ^ source.nix punctuation.terminator.bind.nix
>            newOutputList = outputList ++
#^^^^^^^^^^^^ source.nix
#            ^^^^^^^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#                         ^ source.nix
#                          ^ source.nix keyword.operator.bind.nix
#                           ^ source.nix
#                            ^^^^^^^^^^ source.nix variable.parameter.name.nix
#                                      ^ source.nix
#                                       ^^ source.nix keyword.operator.nix
>                (if any isX outputList then [] else [x]);
#^^^^^^^^^^^^^^^^ source.nix
#                ^ source.nix punctuation.definition.expression.nix
#                 ^^ source.nix keyword.other.nix
#                   ^ source.nix
#                    ^^^ source.nix variable.parameter.name.nix
#                       ^ source.nix
#                        ^^^ source.nix variable.parameter.name.nix
#                           ^ source.nix
#                            ^^^^^^^^^^ source.nix variable.parameter.name.nix
#                                      ^ source.nix
#                                       ^^ source.nix keyword.other.nix
#                                         ^^ source.nix keyword.other.nix
#                                           ^ source.nix
#                                            ^ source.nix punctuation.definition.list.nix
#                                             ^ source.nix punctuation.definition.list.nix
#                                              ^ source.nix
#                                               ^^ source.nix keyword.other.nix
#                                                 ^^ source.nix keyword.other.nix
#                                                   ^ source.nix
#                                                    ^ source.nix punctuation.definition.list.nix
#                                                     ^ source.nix variable.parameter.name.nix
#                                                      ^ source.nix punctuation.definition.list.nix
#                                                       ^ source.nix punctuation.definition.expression.nix
#                                                        ^ source.nix punctuation.terminator.bind.nix
>        in uniqListExt {__id_static="0.5416861884942961";__id_dynamic=builtins.hashFile "sha256" /Users/jeffhykin/repos/snowball/random.ignore;
#^^^^^^^^ source.nix
#        ^^ source.nix keyword.other.nix
#          ^ source.nix
#           ^^^^^^^^^^^ source.nix variable.parameter.name.nix
#                      ^ source.nix
#                       ^ source.nix punctuation.definition.attrset.nix
#                        ^^^^^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#                                   ^ source.nix keyword.operator.bind.nix
#                                    ^ source.nix string.quoted.double.nix punctuation.definition.string.double.start.nix
#                                     ^^^^^^^^^^^^^^^^^^ source.nix string.quoted.double.nix
#                                                       ^ source.nix string.quoted.double.nix punctuation.definition.string.double.end.nix
#                                                        ^ source.nix punctuation.terminator.bind.nix
#                                                         ^^^^^^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#                                                                     ^ source.nix keyword.operator.bind.nix
#                                                                      ^^^^^^^^ source.nix constant.language.nix
#                                                                              ^ source.nix keyword.operator.nix
#                                                                               ^^^^^^^^ source.nix variable.parameter.name.nix
#                                                                                       ^ source.nix
#                                                                                        ^ source.nix string.quoted.double.nix punctuation.definition.string.double.start.nix
#                                                                                         ^^^^^^ source.nix string.quoted.double.nix
#                                                                                               ^ source.nix string.quoted.double.nix punctuation.definition.string.double.end.nix
#                                                                                                ^ source.nix
#                                                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix string.unquoted.path.nix
#                                                                                                                                              ^ source.nix punctuation.terminator.bind.nix
> outputList = newOutputList;
#^ source.nix
# ^^^^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#           ^ source.nix
#            ^ source.nix keyword.operator.bind.nix
#             ^ source.nix
#              ^^^^^^^^^^^^^ source.nix variable.parameter.name.nix
#                           ^ source.nix punctuation.terminator.bind.nix
>                         inputList = (tail inputList);
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix
#                         ^^^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#                                  ^ source.nix
#                                   ^ source.nix keyword.operator.bind.nix
#                                    ^ source.nix
#                                     ^ source.nix punctuation.definition.expression.nix
#                                      ^^^^ source.nix variable.parameter.name.nix
#                                          ^ source.nix
#                                           ^^^^^^^^^ source.nix variable.parameter.name.nix
#                                                    ^ source.nix punctuation.definition.expression.nix
#                                                     ^ source.nix punctuation.terminator.bind.nix
>                         inherit getter compare;
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix
#                         ^^^^^^^ source.nix keyword.other.inherit.nix
#                                ^ source.nix
#                                 ^^^^^^ source.nix entity.other.attribute-name.single.nix
#                                       ^ source.nix
#                                        ^^^^^^^ source.nix entity.other.attribute-name.single.nix
#                                               ^ source.nix punctuation.terminator.inherit.nix
>                       };
#^^^^^^^^^^^^^^^^^^^^^^^ source.nix
#                       ^ source.nix punctuation.definition.attrset.nix
#                        ^ source.nix punctuation.terminator.bind.nix
>
>  condConcat = name: list: checker:
#^^ source.nix
#  ^^^^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#            ^ source.nix
#             ^ source.nix keyword.operator.bind.nix
#              ^ source.nix
#               ^^^^ source.nix variable.parameter.function.4.nix
#                   ^ source.nix punctuation.definition.function.nix
#                    ^ source.nix
#                     ^^^^ source.nix variable.parameter.function.4.nix
#                         ^ source.nix punctuation.definition.function.nix
#                          ^ source.nix
#                           ^^^^^^^ source.nix variable.parameter.function.4.nix
#                                  ^ source.nix punctuation.definition.function.nix
>        if list == [] then name else
#^^^^^^^^ source.nix
#        ^^ source.nix keyword.other.nix
#          ^ source.nix
#           ^^^^ source.nix variable.parameter.name.nix
#               ^ source.nix
#                ^^ source.nix keyword.operator.nix
#                  ^ source.nix
#                   ^ source.nix punctuation.definition.list.nix
#                    ^ source.nix punctuation.definition.list.nix
#                     ^ source.nix
#                      ^^ source.nix keyword.other.nix
#                        ^^ source.nix keyword.other.nix
#                          ^ source.nix
#                           ^^^^ source.nix variable.parameter.name.nix
#                               ^ source.nix
#                                ^^ source.nix keyword.other.nix
#                                  ^^ source.nix keyword.other.nix
>        if checker (head list) then
#^^^^^^^^ source.nix
#        ^^ source.nix keyword.other.nix
#          ^ source.nix
#           ^^^^^^^ source.nix variable.parameter.name.nix
#                  ^ source.nix
#                   ^ source.nix punctuation.definition.expression.nix
#                    ^^^^ source.nix variable.parameter.name.nix
#                        ^ source.nix
#                         ^^^^ source.nix variable.parameter.name.nix
#                             ^ source.nix punctuation.definition.expression.nix
#                              ^ source.nix
#                               ^^ source.nix keyword.other.nix
#                                 ^^ source.nix keyword.other.nix
>                condConcat
#^^^^^^^^^^^^^^^^ source.nix
#                ^^^^^^^^^^ source.nix variable.parameter.name.nix
>                        (name + (head (tail list)))
#^^^^^^^^^^^^^^^^^^^^^^^^ source.nix
#                        ^ source.nix punctuation.definition.expression.nix
#                         ^^^^ source.nix variable.parameter.name.nix
#                             ^ source.nix
#                              ^ source.nix keyword.operator.nix
#                               ^ source.nix
#                                ^ source.nix punctuation.definition.expression.nix
#                                 ^^^^ source.nix variable.parameter.name.nix
#                                     ^ source.nix
#                                      ^ source.nix punctuation.definition.expression.nix
#                                       ^^^^ source.nix variable.parameter.name.nix
#                                           ^ source.nix
#                                            ^^^^ source.nix variable.parameter.name.nix
#                                                ^ source.nix punctuation.definition.expression.nix
#                                                 ^ source.nix punctuation.definition.expression.nix
#                                                  ^ source.nix punctuation.definition.expression.nix
>                        (tail (tail list))
#^^^^^^^^^^^^^^^^^^^^^^^^ source.nix
#                        ^ source.nix punctuation.definition.expression.nix
#                         ^^^^ source.nix variable.parameter.name.nix
#                             ^ source.nix
#                              ^ source.nix punctuation.definition.expression.nix
#                               ^^^^ source.nix variable.parameter.name.nix
#                                   ^ source.nix
#                                    ^^^^ source.nix variable.parameter.name.nix
#                                        ^ source.nix punctuation.definition.expression.nix
#                                         ^ source.nix punctuation.definition.expression.nix
>                        checker
#^^^^^^^^^^^^^^^^^^^^^^^^ source.nix
#                        ^^^^^^^ source.nix variable.parameter.name.nix
>        else condConcat
#^^^^^^^^ source.nix
#        ^^ source.nix keyword.other.nix
#          ^^ source.nix keyword.other.nix
#            ^ source.nix
#             ^^^^^^^^^^ source.nix variable.parameter.name.nix
>                name (tail (tail list)) checker;
#^^^^^^^^^^^^^^^^ source.nix
#                ^^^^ source.nix variable.parameter.name.nix
#                    ^ source.nix
#                     ^ source.nix punctuation.definition.expression.nix
#                      ^^^^ source.nix variable.parameter.name.nix
#                          ^ source.nix
#                           ^ source.nix punctuation.definition.expression.nix
#                            ^^^^ source.nix variable.parameter.name.nix
#                                ^ source.nix
#                                 ^^^^ source.nix variable.parameter.name.nix
#                                     ^ source.nix punctuation.definition.expression.nix
#                                      ^ source.nix punctuation.definition.expression.nix
#                                       ^ source.nix
#                                        ^^^^^^^ source.nix variable.parameter.name.nix
#                                               ^ source.nix punctuation.terminator.bind.nix
>
>  lazyGenericClosure = {startSet, operator}:
#^^ source.nix
#  ^^^^^^^^^^^^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#                    ^ source.nix
#                     ^ source.nix keyword.operator.bind.nix
#                      ^ source.nix
#                       ^ source.nix punctuation.definition.entity.function.2.nix
#                        ^^^^^^^^ source.nix variable.parameter.function.1.nix
#                                ^ source.nix keyword.operator.nix
#                                 ^ source.nix
#                                  ^^^^^^^^ source.nix variable.parameter.function.1.nix
#                                          ^ source.nix punctuation.definition.entity.function.nix
#                                           ^ source.nix punctuation.definition.function.nix
>    let
#^^^^ source.nix
#    ^^^ source.nix keyword.other.nix
>      work = list: doneKeys: result:
#^^^^^^ source.nix
#      ^^^^ source.nix entity.other.attribute-name.multipart.nix
#          ^ source.nix
#           ^ source.nix keyword.operator.bind.nix
#            ^ source.nix
#             ^^^^ source.nix variable.parameter.function.4.nix
#                 ^ source.nix punctuation.definition.function.nix
#                  ^ source.nix
#                   ^^^^^^^^ source.nix variable.parameter.function.4.nix
#                           ^ source.nix punctuation.definition.function.nix
#                            ^ source.nix
#                             ^^^^^^ source.nix variable.parameter.function.4.nix
#                                   ^ source.nix punctuation.definition.function.nix
>        if list == [] then
#^^^^^^^^ source.nix
#        ^^ source.nix keyword.other.nix
#          ^ source.nix
#           ^^^^ source.nix variable.parameter.name.nix
#               ^ source.nix
#                ^^ source.nix keyword.operator.nix
#                  ^ source.nix
#                   ^ source.nix punctuation.definition.list.nix
#                    ^ source.nix punctuation.definition.list.nix
#                     ^ source.nix
#                      ^^ source.nix keyword.other.nix
#                        ^^ source.nix keyword.other.nix
>          result
#^^^^^^^^^^ source.nix
#          ^^^^^^ source.nix variable.parameter.name.nix
>        else
#^^^^^^^^ source.nix
#        ^^ source.nix keyword.other.nix
#          ^^ source.nix keyword.other.nix
>          let x = head list; key = x.key; in
#^^^^^^^^^^ source.nix
#          ^^^ source.nix keyword.other.nix
#             ^ source.nix
#              ^ source.nix entity.other.attribute-name.multipart.nix
#               ^ source.nix
#                ^ source.nix keyword.operator.bind.nix
#                 ^ source.nix
#                  ^^^^ source.nix variable.parameter.name.nix
#                      ^ source.nix
#                       ^^^^ source.nix variable.parameter.name.nix
#                           ^ source.nix punctuation.terminator.bind.nix
#                            ^ source.nix
#                             ^^^ source.nix entity.other.attribute-name.multipart.nix
#                                ^ source.nix
#                                 ^ source.nix keyword.operator.bind.nix
#                                  ^ source.nix
#                                   ^ source.nix variable.parameter.name.nix
#                                    ^ source.nix keyword.operator.nix
#                                     ^^^ source.nix variable.parameter.name.nix
#                                        ^ source.nix punctuation.terminator.bind.nix
#                                         ^ source.nix
#                                          ^^ source.nix keyword.other.nix
>          if elem key doneKeys then
#^^^^^^^^^^ source.nix
#          ^^ source.nix keyword.other.nix
#            ^ source.nix
#             ^^^^ source.nix variable.parameter.name.nix
#                 ^ source.nix
#                  ^^^ source.nix variable.parameter.name.nix
#                     ^ source.nix
#                      ^^^^^^^^ source.nix variable.parameter.name.nix
#                              ^ source.nix
#                               ^^ source.nix keyword.other.nix
#                                 ^^ source.nix keyword.other.nix
>            work (tail list) doneKeys result
#^^^^^^^^^^^^ source.nix
#            ^^^^ source.nix variable.parameter.name.nix
#                ^ source.nix
#                 ^ source.nix punctuation.definition.expression.nix
#                  ^^^^ source.nix variable.parameter.name.nix
#                      ^ source.nix
#                       ^^^^ source.nix variable.parameter.name.nix
#                           ^ source.nix punctuation.definition.expression.nix
#                            ^ source.nix
#                             ^^^^^^^^ source.nix variable.parameter.name.nix
#                                     ^ source.nix
#                                      ^^^^^^ source.nix variable.parameter.name.nix
>          else
#^^^^^^^^^^ source.nix
#          ^^ source.nix keyword.other.nix
#            ^^ source.nix keyword.other.nix
>            work (tail list ++ operator x) ([key] ++ doneKeys) ([x] ++ result);
#^^^^^^^^^^^^ source.nix
#            ^^^^ source.nix variable.parameter.name.nix
#                ^ source.nix
#                 ^ source.nix punctuation.definition.expression.nix
#                  ^^^^ source.nix variable.parameter.name.nix
#                      ^ source.nix
#                       ^^^^ source.nix variable.parameter.name.nix
#                           ^ source.nix
#                            ^^ source.nix keyword.operator.nix
#                              ^ source.nix
#                               ^^^^^^^^ source.nix variable.parameter.name.nix
#                                       ^ source.nix
#                                        ^ source.nix variable.parameter.name.nix
#                                         ^ source.nix punctuation.definition.expression.nix
#                                          ^ source.nix
#                                           ^ source.nix punctuation.definition.expression.nix
#                                            ^ source.nix punctuation.definition.list.nix
#                                             ^^^ source.nix variable.parameter.name.nix
#                                                ^ source.nix punctuation.definition.list.nix
#                                                 ^ source.nix
#                                                  ^^ source.nix keyword.operator.nix
#                                                    ^ source.nix
#                                                     ^^^^^^^^ source.nix variable.parameter.name.nix
#                                                             ^ source.nix punctuation.definition.expression.nix
#                                                              ^ source.nix
#                                                               ^ source.nix punctuation.definition.expression.nix
#                                                                ^ source.nix punctuation.definition.list.nix
#                                                                 ^ source.nix variable.parameter.name.nix
#                                                                  ^ source.nix punctuation.definition.list.nix
#                                                                   ^ source.nix
#                                                                    ^^ source.nix keyword.operator.nix
#                                                                      ^ source.nix
#                                                                       ^^^^^^ source.nix variable.parameter.name.nix
#                                                                             ^ source.nix punctuation.definition.expression.nix
#                                                                              ^ source.nix punctuation.terminator.bind.nix
>    in
#^^^^ source.nix
#    ^^ source.nix keyword.other.nix
>      work startSet [] [];
#^^^^^^ source.nix
#      ^^^^ source.nix variable.parameter.name.nix
#          ^ source.nix
#           ^^^^^^^^ source.nix variable.parameter.name.nix
#                   ^ source.nix
#                    ^ source.nix punctuation.definition.list.nix
#                     ^ source.nix punctuation.definition.list.nix
#                      ^ source.nix
#                       ^ source.nix punctuation.definition.list.nix
#                        ^ source.nix punctuation.definition.list.nix
#                         ^ source.nix punctuation.terminator.bind.nix
>
>  innerModifySumArgs = f: x: a: b: if b == null then (f a b) // x else
#^^ source.nix
#  ^^^^^^^^^^^^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#                    ^ source.nix
#                     ^ source.nix keyword.operator.bind.nix
#                      ^ source.nix
#                       ^ source.nix variable.parameter.function.4.nix
#                        ^ source.nix punctuation.definition.function.nix
#                         ^ source.nix
#                          ^ source.nix variable.parameter.function.4.nix
#                           ^ source.nix punctuation.definition.function.nix
#                            ^ source.nix
#                             ^ source.nix variable.parameter.function.4.nix
#                              ^ source.nix punctuation.definition.function.nix
#                               ^ source.nix
#                                ^ source.nix variable.parameter.function.4.nix
#                                 ^ source.nix punctuation.definition.function.nix
#                                  ^ source.nix
#                                   ^^ source.nix keyword.other.nix
#                                     ^ source.nix
#                                      ^ source.nix variable.parameter.name.nix
#                                       ^ source.nix
#                                        ^^ source.nix keyword.operator.nix
#                                          ^ source.nix
#                                           ^^^^ source.nix constant.language.nix
#                                               ^ source.nix
#                                                ^^ source.nix keyword.other.nix
#                                                  ^^ source.nix keyword.other.nix
#                                                    ^ source.nix
#                                                     ^ source.nix punctuation.definition.expression.nix
#                                                      ^ source.nix variable.parameter.name.nix
#                                                       ^ source.nix
#                                                        ^ source.nix variable.parameter.name.nix
#                                                         ^ source.nix
#                                                          ^ source.nix variable.parameter.name.nix
#                                                           ^ source.nix punctuation.definition.expression.nix
#                                                            ^ source.nix
#                                                             ^^ source.nix keyword.operator.nix
#                                                               ^ source.nix
#                                                                ^ source.nix variable.parameter.name.nix
#                                                                 ^ source.nix
#                                                                  ^^ source.nix keyword.other.nix
#                                                                    ^^ source.nix keyword.other.nix
>        innerModifySumArgs f x (a // b);
#^^^^^^^^ source.nix
#        ^^^^^^^^^^^^^^^^^^ source.nix variable.parameter.name.nix
#                          ^ source.nix
#                           ^ source.nix variable.parameter.name.nix
#                            ^ source.nix
#                             ^ source.nix variable.parameter.name.nix
#                              ^ source.nix
#                               ^ source.nix punctuation.definition.expression.nix
#                                ^ source.nix variable.parameter.name.nix
#                                 ^ source.nix
#                                  ^^ source.nix keyword.operator.nix
#                                    ^ source.nix
#                                     ^ source.nix variable.parameter.name.nix
#                                      ^ source.nix punctuation.definition.expression.nix
#                                       ^ source.nix punctuation.terminator.bind.nix
>  modifySumArgs = f: x: innerModifySumArgs f x {};
#^^ source.nix
#  ^^^^^^^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#               ^ source.nix
#                ^ source.nix keyword.operator.bind.nix
#                 ^ source.nix
#                  ^ source.nix variable.parameter.function.4.nix
#                   ^ source.nix punctuation.definition.function.nix
#                    ^ source.nix
#                     ^ source.nix variable.parameter.function.4.nix
#                      ^ source.nix punctuation.definition.function.nix
#                       ^ source.nix
#                        ^^^^^^^^^^^^^^^^^^ source.nix variable.parameter.name.nix
#                                          ^ source.nix
#                                           ^ source.nix variable.parameter.name.nix
#                                            ^ source.nix
#                                             ^ source.nix variable.parameter.name.nix
#                                              ^ source.nix
#                                               ^ source.nix punctuation.definition.attrset.nix
#                                                ^ source.nix punctuation.definition.attrset.nix
#                                                 ^ source.nix punctuation.terminator.bind.nix
>
>
>  innerClosePropagation = acc: xs:
#^^ source.nix
#  ^^^^^^^^^^^^^^^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#                       ^ source.nix
#                        ^ source.nix keyword.operator.bind.nix
#                         ^ source.nix
#                          ^^^ source.nix variable.parameter.function.4.nix
#                             ^ source.nix punctuation.definition.function.nix
#                              ^ source.nix
#                               ^^ source.nix variable.parameter.function.4.nix
#                                 ^ source.nix punctuation.definition.function.nix
>    if xs == []
#^^^^ source.nix
#    ^^ source.nix keyword.other.nix
#      ^ source.nix
#       ^^ source.nix variable.parameter.name.nix
#         ^ source.nix
#          ^^ source.nix keyword.operator.nix
#            ^ source.nix
#             ^ source.nix punctuation.definition.list.nix
#              ^ source.nix punctuation.definition.list.nix
>    then acc
#^^^^ source.nix
#    ^^ source.nix keyword.other.nix
#      ^^ source.nix keyword.other.nix
#        ^ source.nix
#         ^^^ source.nix variable.parameter.name.nix
>    else let y  = head xs;
#^^^^ source.nix
#    ^^ source.nix keyword.other.nix
#      ^^ source.nix keyword.other.nix
#        ^ source.nix
#         ^^^ source.nix keyword.other.nix
#            ^ source.nix
#             ^ source.nix entity.other.attribute-name.multipart.nix
#              ^^ source.nix
#                ^ source.nix keyword.operator.bind.nix
#                 ^ source.nix
#                  ^^^^ source.nix variable.parameter.name.nix
#                      ^ source.nix
#                       ^^ source.nix variable.parameter.name.nix
#                         ^ source.nix punctuation.terminator.bind.nix
>             ys = tail xs;
#^^^^^^^^^^^^^ source.nix
#             ^^ source.nix entity.other.attribute-name.multipart.nix
#               ^ source.nix
#                ^ source.nix keyword.operator.bind.nix
#                 ^ source.nix
#                  ^^^^ source.nix variable.parameter.name.nix
#                      ^ source.nix
#                       ^^ source.nix variable.parameter.name.nix
#                         ^ source.nix punctuation.terminator.bind.nix
>         in if ! isAttrs y
#^^^^^^^^^ source.nix
#         ^^ source.nix keyword.other.nix
#           ^ source.nix
#            ^^ source.nix keyword.other.nix
#              ^ source.nix
#               ^ source.nix keyword.operator.unary.nix
#                ^ source.nix
#                 ^^^^^^^ source.nix variable.parameter.name.nix
#                        ^ source.nix
#                         ^ source.nix variable.parameter.name.nix
>            then innerClosePropagation acc ys
#^^^^^^^^^^^^ source.nix
#            ^^ source.nix keyword.other.nix
#              ^^ source.nix keyword.other.nix
#                ^ source.nix
#                 ^^^^^^^^^^^^^^^^^^^^^ source.nix variable.parameter.name.nix
#                                      ^ source.nix
#                                       ^^^ source.nix variable.parameter.name.nix
#                                          ^ source.nix
#                                           ^^ source.nix variable.parameter.name.nix
>            else let acc' = [y] ++ acc;
#^^^^^^^^^^^^ source.nix
#            ^^ source.nix keyword.other.nix
#              ^^ source.nix keyword.other.nix
#                ^ source.nix
#                 ^^^ source.nix keyword.other.nix
#                    ^ source.nix
#                     ^^^^ source.nix entity.other.attribute-name.multipart.nix
#                         ^ source.nix
#                          ^ source.nix keyword.operator.bind.nix
#                           ^ source.nix
#                            ^ source.nix punctuation.definition.list.nix
#                             ^ source.nix variable.parameter.name.nix
#                              ^ source.nix punctuation.definition.list.nix
#                               ^ source.nix
#                                ^^ source.nix keyword.operator.nix
#                                  ^ source.nix
#                                   ^^^ source.nix variable.parameter.name.nix
#                                      ^ source.nix punctuation.terminator.bind.nix
>                 in innerClosePropagation
#^^^^^^^^^^^^^^^^^ source.nix
#                 ^^ source.nix keyword.other.nix
#                   ^ source.nix
#                    ^^^^^^^^^^^^^^^^^^^^^ source.nix variable.parameter.name.nix
>                      acc'
#^^^^^^^^^^^^^^^^^^^^^^ source.nix
#                      ^^^^ source.nix variable.parameter.name.nix
>                      (uniqList {__id_static="0.43591725975550166";__id_dynamic=builtins.hashFile "sha256" /Users/jeffhykin/repos/snowball/random.ignore;
#^^^^^^^^^^^^^^^^^^^^^^ source.nix
#                      ^ source.nix punctuation.definition.expression.nix
#                       ^^^^^^^^ source.nix variable.parameter.name.nix
#                               ^ source.nix
#                                ^ source.nix punctuation.definition.attrset.nix
#                                 ^^^^^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#                                            ^ source.nix keyword.operator.bind.nix
#                                             ^ source.nix string.quoted.double.nix punctuation.definition.string.double.start.nix
#                                              ^^^^^^^^^^^^^^^^^^^ source.nix string.quoted.double.nix
#                                                                 ^ source.nix string.quoted.double.nix punctuation.definition.string.double.end.nix
#                                                                  ^ source.nix punctuation.terminator.bind.nix
#                                                                   ^^^^^^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#                                                                               ^ source.nix keyword.operator.bind.nix
#                                                                                ^^^^^^^^ source.nix constant.language.nix
#                                                                                        ^ source.nix keyword.operator.nix
#                                                                                         ^^^^^^^^ source.nix variable.parameter.name.nix
#                                                                                                 ^ source.nix
#                                                                                                  ^ source.nix string.quoted.double.nix punctuation.definition.string.double.start.nix
#                                                                                                   ^^^^^^ source.nix string.quoted.double.nix
#                                                                                                         ^ source.nix string.quoted.double.nix punctuation.definition.string.double.end.nix
#                                                                                                          ^ source.nix
#                                                                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix string.unquoted.path.nix
#                                                                                                                                                        ^ source.nix punctuation.terminator.bind.nix
> inputList = (maybeAttrNullable "propagatedBuildInputs" [] y)
#^ source.nix
# ^^^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#          ^ source.nix
#           ^ source.nix keyword.operator.bind.nix
#            ^ source.nix
#             ^ source.nix punctuation.definition.expression.nix
#              ^^^^^^^^^^^^^^^^^ source.nix variable.parameter.name.nix
#                               ^ source.nix
#                                ^ source.nix string.quoted.double.nix punctuation.definition.string.double.start.nix
#                                 ^^^^^^^^^^^^^^^^^^^^^ source.nix string.quoted.double.nix
#                                                      ^ source.nix string.quoted.double.nix punctuation.definition.string.double.end.nix
#                                                       ^ source.nix
#                                                        ^ source.nix punctuation.definition.list.nix
#                                                         ^ source.nix punctuation.definition.list.nix
#                                                          ^ source.nix
#                                                           ^ source.nix variable.parameter.name.nix
#                                                            ^ source.nix punctuation.definition.expression.nix
>                                           ++ (maybeAttrNullable "propagatedNativeBuildInputs" [] y)
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix
#                                           ^^ source.nix keyword.operator.nix
#                                             ^ source.nix
#                                              ^ source.nix punctuation.definition.expression.nix
#                                               ^^^^^^^^^^^^^^^^^ source.nix variable.parameter.name.nix
#                                                                ^ source.nix
#                                                                 ^ source.nix string.quoted.double.nix punctuation.definition.string.double.start.nix
#                                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix string.quoted.double.nix
#                                                                                             ^ source.nix string.quoted.double.nix punctuation.definition.string.double.end.nix
#                                                                                              ^ source.nix
#                                                                                               ^ source.nix punctuation.definition.list.nix
#                                                                                                ^ source.nix punctuation.definition.list.nix
#                                                                                                 ^ source.nix
#                                                                                                  ^ source.nix variable.parameter.name.nix
#                                                                                                   ^ source.nix punctuation.definition.expression.nix
>                                           ++ ys;
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix
#                                           ^^ source.nix keyword.operator.nix
#                                             ^ source.nix
#                                              ^^ source.nix variable.parameter.name.nix
#                                                ^ source.nix punctuation.terminator.bind.nix
>                                  acc = acc';
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix
#                                  ^^^ source.nix entity.other.attribute-name.multipart.nix
#                                     ^ source.nix
#                                      ^ source.nix keyword.operator.bind.nix
#                                       ^ source.nix
#                                        ^^^^ source.nix variable.parameter.name.nix
#                                            ^ source.nix punctuation.terminator.bind.nix
>                                }
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix
#                                ^ source.nix punctuation.definition.attrset.nix
>                      );
#^^^^^^^^^^^^^^^^^^^^^^ source.nix
#                      ^ source.nix punctuation.definition.expression.nix
#                       ^ source.nix punctuation.terminator.bind.nix
>
>  closePropagationSlow = list: (uniqList {__id_static="0.4333385880390894";__id_dynamic=builtins.hashFile "sha256" /Users/jeffhykin/repos/snowball/random.ignore;
#^^ source.nix
#  ^^^^^^^^^^^^^^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#                      ^ source.nix
#                       ^ source.nix keyword.operator.bind.nix
#                        ^ source.nix
#                         ^^^^ source.nix variable.parameter.function.4.nix
#                             ^ source.nix punctuation.definition.function.nix
#                              ^ source.nix
#                               ^ source.nix punctuation.definition.expression.nix
#                                ^^^^^^^^ source.nix variable.parameter.name.nix
#                                        ^ source.nix
#                                         ^ source.nix punctuation.definition.attrset.nix
#                                          ^^^^^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#                                                     ^ source.nix keyword.operator.bind.nix
#                                                      ^ source.nix string.quoted.double.nix punctuation.definition.string.double.start.nix
#                                                       ^^^^^^^^^^^^^^^^^^ source.nix string.quoted.double.nix
#                                                                         ^ source.nix string.quoted.double.nix punctuation.definition.string.double.end.nix
#                                                                          ^ source.nix punctuation.terminator.bind.nix
#                                                                           ^^^^^^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#                                                                                       ^ source.nix keyword.operator.bind.nix
#                                                                                        ^^^^^^^^ source.nix constant.language.nix
#                                                                                                ^ source.nix keyword.operator.nix
#                                                                                                 ^^^^^^^^ source.nix variable.parameter.name.nix
#                                                                                                         ^ source.nix
#                                                                                                          ^ source.nix string.quoted.double.nix punctuation.definition.string.double.start.nix
#                                                                                                           ^^^^^^ source.nix string.quoted.double.nix
#                                                                                                                 ^ source.nix string.quoted.double.nix punctuation.definition.string.double.end.nix
#                                                                                                                  ^ source.nix
#                                                                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix string.unquoted.path.nix
#                                                                                                                                                                ^ source.nix punctuation.terminator.bind.nix
>inputList = (innerClosePropagation [] list);});
#^^^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#         ^ source.nix
#          ^ source.nix keyword.operator.bind.nix
#           ^ source.nix
#            ^ source.nix punctuation.definition.expression.nix
#             ^^^^^^^^^^^^^^^^^^^^^ source.nix variable.parameter.name.nix
#                                  ^ source.nix
#                                   ^ source.nix punctuation.definition.list.nix
#                                    ^ source.nix punctuation.definition.list.nix
#                                     ^ source.nix
#                                      ^^^^ source.nix variable.parameter.name.nix
#                                          ^ source.nix punctuation.definition.expression.nix
#                                           ^ source.nix punctuation.terminator.bind.nix
#                                            ^ source.nix punctuation.definition.attrset.nix
#                                             ^ source.nix punctuation.definition.expression.nix
#                                              ^ source.nix punctuation.terminator.bind.nix
>
>  # This is an optimisation of lib.closePropagation which avoids the O(n^2) behavior
#^^ source.nix
#  ^ source.nix comment.line.number-sign.nix
#   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix comment.line.number-sign.nix
>  # Using a list of derivations, it generates the full closure of the propagatedXXXBuildInputs
#^^ source.nix
#  ^ source.nix comment.line.number-sign.nix
#   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix comment.line.number-sign.nix
>  # The ordering / sorting / comparison is done based on the `outPath`
#^^ source.nix
#  ^ source.nix comment.line.number-sign.nix
#   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix comment.line.number-sign.nix
>  # attribute of each derivation.
#^^ source.nix
#  ^ source.nix comment.line.number-sign.nix
#   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix comment.line.number-sign.nix
>  # On some benchmarks, it performs up to 15 times faster than lib.closePropagation.
#^^ source.nix
#  ^ source.nix comment.line.number-sign.nix
#   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix comment.line.number-sign.nix
>  # See https://github.com/NixOS/nixpkgs/pull/194391 for details.
#^^ source.nix
#  ^ source.nix comment.line.number-sign.nix
#   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix comment.line.number-sign.nix
>  closePropagationFast = list:
#^^ source.nix
#  ^^^^^^^^^^^^^^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#                      ^ source.nix
#                       ^ source.nix keyword.operator.bind.nix
#                        ^ source.nix
#                         ^^^^ source.nix variable.parameter.function.4.nix
#                             ^ source.nix punctuation.definition.function.nix
>    builtins.map (x: x.val) (builtins.genericClosure {__id_static="0.4393836786265646";__id_dynamic=builtins.hashFile "sha256" /Users/jeffhykin/repos/snowball/random.ignore;
#^^^^ source.nix
#    ^^^^^^^^ source.nix constant.language.nix
#            ^ source.nix keyword.operator.nix
#             ^^^ source.nix support.function.nix
#                ^ source.nix
#                 ^ source.nix punctuation.definition.expression.nix
#                  ^ source.nix variable.parameter.function.4.nix
#                   ^ source.nix punctuation.definition.function.nix
#                    ^ source.nix
#                     ^ source.nix variable.parameter.name.nix
#                      ^ source.nix keyword.operator.nix
#                       ^^^ source.nix variable.parameter.name.nix
#                          ^ source.nix punctuation.definition.expression.nix
#                           ^ source.nix
#                            ^ source.nix punctuation.definition.expression.nix
#                             ^^^^^^^^ source.nix constant.language.nix
#                                     ^ source.nix keyword.operator.nix
#                                      ^^^^^^^^^^^^^^ source.nix variable.parameter.name.nix
#                                                    ^ source.nix
#                                                     ^ source.nix punctuation.definition.attrset.nix
#                                                      ^^^^^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#                                                                 ^ source.nix keyword.operator.bind.nix
#                                                                  ^ source.nix string.quoted.double.nix punctuation.definition.string.double.start.nix
#                                                                   ^^^^^^^^^^^^^^^^^^ source.nix string.quoted.double.nix
#                                                                                     ^ source.nix string.quoted.double.nix punctuation.definition.string.double.end.nix
#                                                                                      ^ source.nix punctuation.terminator.bind.nix
#                                                                                       ^^^^^^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#                                                                                                   ^ source.nix keyword.operator.bind.nix
#                                                                                                    ^^^^^^^^ source.nix constant.language.nix
#                                                                                                            ^ source.nix keyword.operator.nix
#                                                                                                             ^^^^^^^^ source.nix variable.parameter.name.nix
#                                                                                                                     ^ source.nix
#                                                                                                                      ^ source.nix string.quoted.double.nix punctuation.definition.string.double.start.nix
#                                                                                                                       ^^^^^^ source.nix string.quoted.double.nix
#                                                                                                                             ^ source.nix string.quoted.double.nix punctuation.definition.string.double.end.nix
#                                                                                                                              ^ source.nix
#                                                                                                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix string.unquoted.path.nix
#                                                                                                                                                                            ^ source.nix punctuation.terminator.bind.nix
>
>      startSet = builtins.map (x: {__id_static="0.42616742269720653";__id_dynamic=builtins.hashFile "sha256" /Users/jeffhykin/repos/snowball/random.ignore;
#^^^^^^ source.nix
#      ^^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#              ^ source.nix
#               ^ source.nix keyword.operator.bind.nix
#                ^ source.nix
#                 ^^^^^^^^ source.nix constant.language.nix
#                         ^ source.nix keyword.operator.nix
#                          ^^^ source.nix support.function.nix
#                             ^ source.nix
#                              ^ source.nix punctuation.definition.expression.nix
#                               ^ source.nix variable.parameter.function.4.nix
#                                ^ source.nix punctuation.definition.function.nix
#                                 ^ source.nix
#                                  ^ source.nix punctuation.definition.attrset.nix
#                                   ^^^^^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#                                              ^ source.nix keyword.operator.bind.nix
#                                               ^ source.nix string.quoted.double.nix punctuation.definition.string.double.start.nix
#                                                ^^^^^^^^^^^^^^^^^^^ source.nix string.quoted.double.nix
#                                                                   ^ source.nix string.quoted.double.nix punctuation.definition.string.double.end.nix
#                                                                    ^ source.nix punctuation.terminator.bind.nix
#                                                                     ^^^^^^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#                                                                                 ^ source.nix keyword.operator.bind.nix
#                                                                                  ^^^^^^^^ source.nix constant.language.nix
#                                                                                          ^ source.nix keyword.operator.nix
#                                                                                           ^^^^^^^^ source.nix variable.parameter.name.nix
#                                                                                                   ^ source.nix
#                                                                                                    ^ source.nix string.quoted.double.nix punctuation.definition.string.double.start.nix
#                                                                                                     ^^^^^^ source.nix string.quoted.double.nix
#                                                                                                           ^ source.nix string.quoted.double.nix punctuation.definition.string.double.end.nix
#                                                                                                            ^ source.nix
#                                                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix string.unquoted.path.nix
#                                                                                                                                                          ^ source.nix punctuation.terminator.bind.nix
>
>        key = x.outPath;
#^^^^^^^^ source.nix
#        ^^^ source.nix entity.other.attribute-name.multipart.nix
#           ^ source.nix
#            ^ source.nix keyword.operator.bind.nix
#             ^ source.nix
#              ^ source.nix variable.parameter.name.nix
#               ^ source.nix keyword.operator.nix
#                ^^^^^^^ source.nix variable.parameter.name.nix
#                       ^ source.nix punctuation.terminator.bind.nix
>        val = x;
#^^^^^^^^ source.nix
#        ^^^ source.nix entity.other.attribute-name.multipart.nix
#           ^ source.nix
#            ^ source.nix keyword.operator.bind.nix
#             ^ source.nix
#              ^ source.nix variable.parameter.name.nix
#               ^ source.nix punctuation.terminator.bind.nix
>      }) (builtins.filter (x: x != null) list);
#^^^^^^ source.nix
#      ^ source.nix punctuation.definition.attrset.nix
#       ^ source.nix punctuation.definition.expression.nix
#        ^ source.nix
#         ^ source.nix punctuation.definition.expression.nix
#          ^^^^^^^^ source.nix constant.language.nix
#                  ^ source.nix keyword.operator.nix
#                   ^^^^^^ source.nix variable.parameter.name.nix
#                         ^ source.nix
#                          ^ source.nix punctuation.definition.expression.nix
#                           ^ source.nix variable.parameter.function.4.nix
#                            ^ source.nix punctuation.definition.function.nix
#                             ^ source.nix
#                              ^ source.nix variable.parameter.name.nix
#                               ^ source.nix
#                                ^^ source.nix keyword.operator.nix
#                                  ^ source.nix
#                                   ^^^^ source.nix constant.language.nix
#                                       ^ source.nix punctuation.definition.expression.nix
#                                        ^ source.nix
#                                         ^^^^ source.nix variable.parameter.name.nix
#                                             ^ source.nix punctuation.definition.expression.nix
#                                              ^ source.nix punctuation.terminator.bind.nix
>      operator = item:
#^^^^^^ source.nix
#      ^^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#              ^ source.nix
#               ^ source.nix keyword.operator.bind.nix
#                ^ source.nix
#                 ^^^^ source.nix variable.parameter.function.4.nix
#                     ^ source.nix punctuation.definition.function.nix
>        if !builtins.isAttrs item.val then
#^^^^^^^^ source.nix
#        ^^ source.nix keyword.other.nix
#          ^ source.nix
#           ^ source.nix keyword.operator.unary.nix
#            ^^^^^^^^ source.nix constant.language.nix
#                    ^ source.nix keyword.operator.nix
#                     ^^^^^^^ source.nix variable.parameter.name.nix
#                            ^ source.nix
#                             ^^^^ source.nix variable.parameter.name.nix
#                                 ^ source.nix keyword.operator.nix
#                                  ^^^ source.nix variable.parameter.name.nix
#                                     ^ source.nix
#                                      ^^ source.nix keyword.other.nix
#                                        ^^ source.nix keyword.other.nix
>          [ ]
#^^^^^^^^^^ source.nix
#          ^ source.nix punctuation.definition.list.nix
#           ^ source.nix
#            ^ source.nix punctuation.definition.list.nix
>        else
#^^^^^^^^ source.nix
#        ^^ source.nix keyword.other.nix
#          ^^ source.nix keyword.other.nix
>          builtins.concatMap (x:
#^^^^^^^^^^ source.nix
#          ^^^^^^^^ source.nix constant.language.nix
#                  ^ source.nix keyword.operator.nix
#                   ^^^^^^^^^ source.nix variable.parameter.name.nix
#                            ^ source.nix
#                             ^ source.nix punctuation.definition.expression.nix
#                              ^ source.nix variable.parameter.function.4.nix
#                               ^ source.nix punctuation.definition.function.nix
>            if x != null then [{__id_static="0.7684626401674357";__id_dynamic=builtins.hashFile "sha256" /Users/jeffhykin/repos/snowball/random.ignore;
#^^^^^^^^^^^^ source.nix
#            ^^ source.nix keyword.other.nix
#              ^ source.nix
#               ^ source.nix variable.parameter.name.nix
#                ^ source.nix
#                 ^^ source.nix keyword.operator.nix
#                   ^ source.nix
#                    ^^^^ source.nix constant.language.nix
#                        ^ source.nix
#                         ^^ source.nix keyword.other.nix
#                           ^^ source.nix keyword.other.nix
#                             ^ source.nix
#                              ^ source.nix punctuation.definition.list.nix
#                               ^ source.nix punctuation.definition.attrset.nix
#                                ^^^^^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#                                           ^ source.nix keyword.operator.bind.nix
#                                            ^ source.nix string.quoted.double.nix punctuation.definition.string.double.start.nix
#                                             ^^^^^^^^^^^^^^^^^^ source.nix string.quoted.double.nix
#                                                               ^ source.nix string.quoted.double.nix punctuation.definition.string.double.end.nix
#                                                                ^ source.nix punctuation.terminator.bind.nix
#                                                                 ^^^^^^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#                                                                             ^ source.nix keyword.operator.bind.nix
#                                                                              ^^^^^^^^ source.nix constant.language.nix
#                                                                                      ^ source.nix keyword.operator.nix
#                                                                                       ^^^^^^^^ source.nix variable.parameter.name.nix
#                                                                                               ^ source.nix
#                                                                                                ^ source.nix string.quoted.double.nix punctuation.definition.string.double.start.nix
#                                                                                                 ^^^^^^ source.nix string.quoted.double.nix
#                                                                                                       ^ source.nix string.quoted.double.nix punctuation.definition.string.double.end.nix
#                                                                                                        ^ source.nix
#                                                                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix string.unquoted.path.nix
#                                                                                                                                                      ^ source.nix punctuation.terminator.bind.nix
>
>              key = x.outPath;
#^^^^^^^^^^^^^^ source.nix
#              ^^^ source.nix entity.other.attribute-name.multipart.nix
#                 ^ source.nix
#                  ^ source.nix keyword.operator.bind.nix
#                   ^ source.nix
#                    ^ source.nix variable.parameter.name.nix
#                     ^ source.nix keyword.operator.nix
#                      ^^^^^^^ source.nix variable.parameter.name.nix
#                             ^ source.nix punctuation.terminator.bind.nix
>              val = x;
#^^^^^^^^^^^^^^ source.nix
#              ^^^ source.nix entity.other.attribute-name.multipart.nix
#                 ^ source.nix
#                  ^ source.nix keyword.operator.bind.nix
#                   ^ source.nix
#                    ^ source.nix variable.parameter.name.nix
#                     ^ source.nix punctuation.terminator.bind.nix
>            }] else
#^^^^^^^^^^^^ source.nix
#            ^ source.nix punctuation.definition.attrset.nix
#             ^ source.nix punctuation.definition.list.nix
#              ^ source.nix
#               ^^ source.nix keyword.other.nix
#                 ^^ source.nix keyword.other.nix
>              [ ]) ((item.val.propagatedBuildInputs or [ ])
#^^^^^^^^^^^^^^ source.nix
#              ^ source.nix punctuation.definition.list.nix
#               ^ source.nix
#                ^ source.nix punctuation.definition.list.nix
#                 ^ source.nix punctuation.definition.expression.nix
#                  ^ source.nix
#                   ^ source.nix punctuation.definition.expression.nix
#                    ^ source.nix punctuation.definition.expression.nix
#                     ^^^^ source.nix variable.parameter.name.nix
#                         ^ source.nix keyword.operator.nix
#                          ^^^ source.nix variable.parameter.name.nix
#                             ^ source.nix keyword.operator.nix
#                              ^^^^^^^^^^^^^^^^^^^^^ source.nix variable.parameter.name.nix
#                                                   ^ source.nix
#                                                    ^^ source.nix keyword.operator.nix
#                                                      ^ source.nix
#                                                       ^ source.nix punctuation.definition.list.nix
#                                                        ^ source.nix
#                                                         ^ source.nix punctuation.definition.list.nix
#                                                          ^ source.nix punctuation.definition.expression.nix
>                ++ (item.val.propagatedNativeBuildInputs or [ ]));
#^^^^^^^^^^^^^^^^ source.nix
#                ^^ source.nix keyword.operator.nix
#                  ^ source.nix
#                   ^ source.nix punctuation.definition.expression.nix
#                    ^^^^ source.nix variable.parameter.name.nix
#                        ^ source.nix keyword.operator.nix
#                         ^^^ source.nix variable.parameter.name.nix
#                            ^ source.nix keyword.operator.nix
#                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix variable.parameter.name.nix
#                                                        ^ source.nix
#                                                         ^^ source.nix keyword.operator.nix
#                                                           ^ source.nix
#                                                            ^ source.nix punctuation.definition.list.nix
#                                                             ^ source.nix
#                                                              ^ source.nix punctuation.definition.list.nix
#                                                               ^ source.nix punctuation.definition.expression.nix
#                                                                ^ source.nix punctuation.definition.expression.nix
#                                                                 ^ source.nix punctuation.terminator.bind.nix
>    });
#^^^^ source.nix
#    ^ source.nix punctuation.definition.attrset.nix
#     ^ source.nix punctuation.definition.expression.nix
#      ^ source.nix punctuation.terminator.bind.nix
>
>  closePropagation = if builtins ? genericClosure
#^^ source.nix
#  ^^^^^^^^^^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#                  ^ source.nix
#                   ^ source.nix keyword.operator.bind.nix
#                    ^ source.nix
#                     ^^ source.nix keyword.other.nix
#                       ^ source.nix
#                        ^^^^^^^^ source.nix constant.language.nix
#                                ^ source.nix
#                                 ^ source.nix keyword.operator.nix
#                                  ^ source.nix
#                                   ^^^^^^^^^^^^^^ source.nix variable.parameter.name.nix
>    then closePropagationFast
#^^^^ source.nix
#    ^^ source.nix keyword.other.nix
#      ^^ source.nix keyword.other.nix
#        ^ source.nix
#         ^^^^^^^^^^^^^^^^^^^^ source.nix variable.parameter.name.nix
>    else closePropagationSlow;
#^^^^ source.nix
#    ^^ source.nix keyword.other.nix
#      ^^ source.nix keyword.other.nix
#        ^ source.nix
#         ^^^^^^^^^^^^^^^^^^^^ source.nix variable.parameter.name.nix
#                             ^ source.nix punctuation.terminator.bind.nix
>
>  # calls a function (f attr value ) for each record item. returns a list
#^^ source.nix
#  ^ source.nix comment.line.number-sign.nix
#   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix comment.line.number-sign.nix
>  mapAttrsFlatten = f: r: map (attr: f attr r.${attr}) (attrNames r);
#^^ source.nix
#  ^^^^^^^^^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#                 ^ source.nix
#                  ^ source.nix keyword.operator.bind.nix
#                   ^ source.nix
#                    ^ source.nix variable.parameter.function.4.nix
#                     ^ source.nix punctuation.definition.function.nix
#                      ^ source.nix
#                       ^ source.nix variable.parameter.function.4.nix
#                        ^ source.nix punctuation.definition.function.nix
#                         ^ source.nix
#                          ^^^ source.nix support.function.nix
#                             ^ source.nix
#                              ^ source.nix punctuation.definition.expression.nix
#                               ^^^^ source.nix variable.parameter.function.4.nix
#                                   ^ source.nix punctuation.definition.function.nix
#                                    ^ source.nix
#                                     ^ source.nix variable.parameter.name.nix
#                                      ^ source.nix
#                                       ^^^^ source.nix variable.parameter.name.nix
#                                           ^ source.nix
#                                            ^ source.nix variable.parameter.name.nix
#                                             ^ source.nix keyword.operator.nix
#                                              ^^ source.nix meta.embedded punctuation.section.embedded.begin.nix
#                                                ^^^^ source.nix meta.embedded variable.parameter.name.nix
#                                                    ^ source.nix meta.embedded punctuation.section.embedded.end.nix
#                                                     ^ source.nix punctuation.definition.expression.nix
#                                                      ^ source.nix
#                                                       ^ source.nix punctuation.definition.expression.nix
#                                                        ^^^^^^^^^ source.nix variable.parameter.name.nix
#                                                                 ^ source.nix
#                                                                  ^ source.nix variable.parameter.name.nix
#                                                                   ^ source.nix punctuation.definition.expression.nix
#                                                                    ^ source.nix punctuation.terminator.bind.nix
>
>  # attribute set containing one attribute
#^^ source.nix
#  ^ source.nix comment.line.number-sign.nix
#   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix comment.line.number-sign.nix
>  nvs = name: value: listToAttrs [ (nameValuePair name value) ];
#^^ source.nix
#  ^^^ source.nix entity.other.attribute-name.multipart.nix
#     ^ source.nix
#      ^ source.nix keyword.operator.bind.nix
#       ^ source.nix
#        ^^^^ source.nix variable.parameter.function.4.nix
#            ^ source.nix punctuation.definition.function.nix
#             ^ source.nix
#              ^^^^^ source.nix variable.parameter.function.4.nix
#                   ^ source.nix punctuation.definition.function.nix
#                    ^ source.nix
#                     ^^^^^^^^^^^ source.nix variable.parameter.name.nix
#                                ^ source.nix
#                                 ^ source.nix punctuation.definition.list.nix
#                                  ^ source.nix
#                                   ^ source.nix punctuation.definition.expression.nix
#                                    ^^^^^^^^^^^^^ source.nix variable.parameter.name.nix
#                                                 ^ source.nix
#                                                  ^^^^ source.nix variable.parameter.name.nix
#                                                      ^ source.nix
#                                                       ^^^^^ source.nix variable.parameter.name.nix
#                                                            ^ source.nix punctuation.definition.expression.nix
#                                                             ^ source.nix
#                                                              ^ source.nix punctuation.definition.list.nix
#                                                               ^ source.nix punctuation.terminator.bind.nix
>  # adds / replaces an attribute of an attribute set
#^^ source.nix
#  ^ source.nix comment.line.number-sign.nix
#   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix comment.line.number-sign.nix
>  setAttr = set: name: v: set // (nvs name v);
#^^ source.nix
#  ^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#         ^ source.nix
#          ^ source.nix keyword.operator.bind.nix
#           ^ source.nix
#            ^^^ source.nix variable.parameter.function.4.nix
#               ^ source.nix punctuation.definition.function.nix
#                ^ source.nix
#                 ^^^^ source.nix variable.parameter.function.4.nix
#                     ^ source.nix punctuation.definition.function.nix
#                      ^ source.nix
#                       ^ source.nix variable.parameter.function.4.nix
#                        ^ source.nix punctuation.definition.function.nix
#                         ^ source.nix
#                          ^^^ source.nix variable.parameter.name.nix
#                             ^ source.nix
#                              ^^ source.nix keyword.operator.nix
#                                ^ source.nix
#                                 ^ source.nix punctuation.definition.expression.nix
#                                  ^^^ source.nix variable.parameter.name.nix
#                                     ^ source.nix
#                                      ^^^^ source.nix variable.parameter.name.nix
#                                          ^ source.nix
#                                           ^ source.nix variable.parameter.name.nix
#                                            ^ source.nix punctuation.definition.expression.nix
#                                             ^ source.nix punctuation.terminator.bind.nix
>
>  # setAttrMerge (similar to mergeAttrsWithFunc but only merges the values of a particular name)
#^^ source.nix
#  ^ source.nix comment.line.number-sign.nix
#   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix comment.line.number-sign.nix
>  # setAttrMerge "a" [] { a = [2];} (x: x ++ [3]) -> { a = [2 3]; }
#^^ source.nix
#  ^ source.nix comment.line.number-sign.nix
#   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix comment.line.number-sign.nix
>  # setAttrMerge "a" [] {         } (x: x ++ [3]) -> { a = [  3]; }
#^^ source.nix
#  ^ source.nix comment.line.number-sign.nix
#   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix comment.line.number-sign.nix
>  setAttrMerge = name: default: attrs: f:
#^^ source.nix
#  ^^^^^^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#              ^ source.nix
#               ^ source.nix keyword.operator.bind.nix
#                ^ source.nix
#                 ^^^^ source.nix variable.parameter.function.4.nix
#                     ^ source.nix punctuation.definition.function.nix
#                      ^ source.nix
#                       ^^^^^^^ source.nix variable.parameter.function.4.nix
#                              ^ source.nix punctuation.definition.function.nix
#                               ^ source.nix
#                                ^^^^^ source.nix variable.parameter.function.4.nix
#                                     ^ source.nix punctuation.definition.function.nix
#                                      ^ source.nix
#                                       ^ source.nix variable.parameter.function.4.nix
#                                        ^ source.nix punctuation.definition.function.nix
>    setAttr attrs name (f (maybeAttr name default attrs));
#^^^^ source.nix
#    ^^^^^^^ source.nix variable.parameter.name.nix
#           ^ source.nix
#            ^^^^^ source.nix variable.parameter.name.nix
#                 ^ source.nix
#                  ^^^^ source.nix variable.parameter.name.nix
#                      ^ source.nix
#                       ^ source.nix punctuation.definition.expression.nix
#                        ^ source.nix variable.parameter.name.nix
#                         ^ source.nix
#                          ^ source.nix punctuation.definition.expression.nix
#                           ^^^^^^^^^ source.nix variable.parameter.name.nix
#                                    ^ source.nix
#                                     ^^^^ source.nix variable.parameter.name.nix
#                                         ^ source.nix
#                                          ^^^^^^^ source.nix variable.parameter.name.nix
#                                                 ^ source.nix
#                                                  ^^^^^ source.nix variable.parameter.name.nix
#                                                       ^ source.nix punctuation.definition.expression.nix
#                                                        ^ source.nix punctuation.definition.expression.nix
#                                                         ^ source.nix punctuation.terminator.bind.nix
>
>  # Using f = a: b = b the result is similar to //
#^^ source.nix
#  ^ source.nix comment.line.number-sign.nix
#   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix comment.line.number-sign.nix
>  # merge attributes with custom function handling the case that the attribute
#^^ source.nix
#  ^ source.nix comment.line.number-sign.nix
#   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix comment.line.number-sign.nix
>  # exists in both sets
#^^ source.nix
#  ^ source.nix comment.line.number-sign.nix
#   ^^^^^^^^^^^^^^^^^^^^ source.nix comment.line.number-sign.nix
>  mergeAttrsWithFunc = f: set1: set2:
#^^ source.nix
#  ^^^^^^^^^^^^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#                    ^ source.nix
#                     ^ source.nix keyword.operator.bind.nix
#                      ^ source.nix
#                       ^ source.nix variable.parameter.function.4.nix
#                        ^ source.nix punctuation.definition.function.nix
#                         ^ source.nix
#                          ^^^^ source.nix variable.parameter.function.4.nix
#                              ^ source.nix punctuation.definition.function.nix
#                               ^ source.nix
#                                ^^^^ source.nix variable.parameter.function.4.nix
#                                    ^ source.nix punctuation.definition.function.nix
>    foldr (n: set: if set ? ${n}
#^^^^ source.nix
#    ^^^^^ source.nix variable.parameter.name.nix
#         ^ source.nix
#          ^ source.nix punctuation.definition.expression.nix
#           ^ source.nix variable.parameter.function.4.nix
#            ^ source.nix punctuation.definition.function.nix
#             ^ source.nix
#              ^^^ source.nix variable.parameter.function.4.nix
#                 ^ source.nix punctuation.definition.function.nix
#                  ^ source.nix
#                   ^^ source.nix keyword.other.nix
#                     ^ source.nix
#                      ^^^ source.nix variable.parameter.name.nix
#                         ^ source.nix
#                          ^ source.nix keyword.operator.nix
#                           ^ source.nix
#                            ^^ source.nix meta.embedded punctuation.section.embedded.begin.nix
#                              ^ source.nix meta.embedded variable.parameter.name.nix
#                               ^ source.nix meta.embedded punctuation.section.embedded.end.nix
>                        then setAttr set n (f set.${n} set2.${n})
#^^^^^^^^^^^^^^^^^^^^^^^^ source.nix
#                        ^^ source.nix keyword.other.nix
#                          ^^ source.nix keyword.other.nix
#                            ^ source.nix
#                             ^^^^^^^ source.nix variable.parameter.name.nix
#                                    ^ source.nix
#                                     ^^^ source.nix variable.parameter.name.nix
#                                        ^ source.nix
#                                         ^ source.nix variable.parameter.name.nix
#                                          ^ source.nix
#                                           ^ source.nix punctuation.definition.expression.nix
#                                            ^ source.nix variable.parameter.name.nix
#                                             ^ source.nix
#                                              ^^^ source.nix variable.parameter.name.nix
#                                                 ^ source.nix keyword.operator.nix
#                                                  ^^ source.nix meta.embedded punctuation.section.embedded.begin.nix
#                                                    ^ source.nix meta.embedded variable.parameter.name.nix
#                                                     ^ source.nix meta.embedded punctuation.section.embedded.end.nix
#                                                      ^ source.nix
#                                                       ^^^^ source.nix variable.parameter.name.nix
#                                                           ^ source.nix keyword.operator.nix
#                                                            ^^ source.nix meta.embedded punctuation.section.embedded.begin.nix
#                                                              ^ source.nix meta.embedded variable.parameter.name.nix
#                                                               ^ source.nix meta.embedded punctuation.section.embedded.end.nix
#                                                                ^ source.nix punctuation.definition.expression.nix
>                        else set )
#^^^^^^^^^^^^^^^^^^^^^^^^ source.nix
#                        ^^ source.nix keyword.other.nix
#                          ^^ source.nix keyword.other.nix
#                            ^ source.nix
#                             ^^^ source.nix variable.parameter.name.nix
#                                ^ source.nix
#                                 ^ source.nix punctuation.definition.expression.nix
>           (set2 // set1) (attrNames set2);
#^^^^^^^^^^^ source.nix
#           ^ source.nix punctuation.definition.expression.nix
#            ^^^^ source.nix variable.parameter.name.nix
#                ^ source.nix
#                 ^^ source.nix keyword.operator.nix
#                   ^ source.nix
#                    ^^^^ source.nix variable.parameter.name.nix
#                        ^ source.nix punctuation.definition.expression.nix
#                         ^ source.nix
#                          ^ source.nix punctuation.definition.expression.nix
#                           ^^^^^^^^^ source.nix variable.parameter.name.nix
#                                    ^ source.nix
#                                     ^^^^ source.nix variable.parameter.name.nix
#                                         ^ source.nix punctuation.definition.expression.nix
#                                          ^ source.nix punctuation.terminator.bind.nix
>
>  # merging two attribute set concatenating the values of same attribute names
#^^ source.nix
#  ^ source.nix comment.line.number-sign.nix
#   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix comment.line.number-sign.nix
>  # eg { a = 7; } {  a = [ 2 3 ]; } becomes { a = [ 7 2 3 ]; }
#^^ source.nix
#  ^ source.nix comment.line.number-sign.nix
#   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix comment.line.number-sign.nix
>  mergeAttrsConcatenateValues = mergeAttrsWithFunc ( a: b: (toList a) ++ (toList b) );
#^^ source.nix
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#                             ^ source.nix
#                              ^ source.nix keyword.operator.bind.nix
#                               ^ source.nix
#                                ^^^^^^^^^^^^^^^^^^ source.nix variable.parameter.name.nix
#                                                  ^ source.nix
#                                                   ^ source.nix punctuation.definition.expression.nix
#                                                    ^ source.nix
#                                                     ^ source.nix variable.parameter.function.4.nix
#                                                      ^ source.nix punctuation.definition.function.nix
#                                                       ^ source.nix
#                                                        ^ source.nix variable.parameter.function.4.nix
#                                                         ^ source.nix punctuation.definition.function.nix
#                                                          ^ source.nix
#                                                           ^ source.nix punctuation.definition.expression.nix
#                                                            ^^^^^^ source.nix variable.parameter.name.nix
#                                                                  ^ source.nix
#                                                                   ^ source.nix variable.parameter.name.nix
#                                                                    ^ source.nix punctuation.definition.expression.nix
#                                                                     ^ source.nix
#                                                                      ^^ source.nix keyword.operator.nix
#                                                                        ^ source.nix
#                                                                         ^ source.nix punctuation.definition.expression.nix
#                                                                          ^^^^^^ source.nix variable.parameter.name.nix
#                                                                                ^ source.nix
#                                                                                 ^ source.nix variable.parameter.name.nix
#                                                                                  ^ source.nix punctuation.definition.expression.nix
#                                                                                   ^ source.nix
#                                                                                    ^ source.nix punctuation.definition.expression.nix
#                                                                                     ^ source.nix punctuation.terminator.bind.nix
>
>  # merges attributes using //, if a name exists in both attributes
#^^ source.nix
#  ^ source.nix comment.line.number-sign.nix
#   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix comment.line.number-sign.nix
>  # an error will be triggered unless its listed in mergeLists
#^^ source.nix
#  ^ source.nix comment.line.number-sign.nix
#   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix comment.line.number-sign.nix
>  # so you can mergeAttrsNoOverride { buildInputs = [a]; } { buildInputs = [a]; } {} to get
#^^ source.nix
#  ^ source.nix comment.line.number-sign.nix
#   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix comment.line.number-sign.nix
>  # { buildInputs = [a b]; }
#^^ source.nix
#  ^ source.nix comment.line.number-sign.nix
#   ^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix comment.line.number-sign.nix
>  # merging buildPhase doesn't really make sense. The cases will be rare where appending /prefixing will fit your needs?
#^^ source.nix
#  ^ source.nix comment.line.number-sign.nix
#   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix comment.line.number-sign.nix
>  # in these cases the first buildPhase will override the second one
#^^ source.nix
#  ^ source.nix comment.line.number-sign.nix
#   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix comment.line.number-sign.nix
>  # ! deprecated, use mergeAttrByFunc instead
#^^ source.nix
#  ^ source.nix comment.line.number-sign.nix
#   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix comment.line.number-sign.nix
>  mergeAttrsNoOverride = { mergeLists ? ["buildInputs" "propagatedBuildInputs"],
#^^ source.nix
#  ^^^^^^^^^^^^^^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#                      ^ source.nix
#                       ^ source.nix keyword.operator.bind.nix
#                        ^ source.nix
#                         ^ source.nix punctuation.definition.entity.function.2.nix
#                          ^ source.nix
#                           ^^^^^^^^^^ source.nix variable.parameter.function.1.nix
#                                     ^ source.nix
#                                      ^ source.nix keyword.operator.nix
#                                       ^ source.nix
#                                        ^ source.nix punctuation.definition.list.nix
#                                         ^ source.nix string.quoted.double.nix punctuation.definition.string.double.start.nix
#                                          ^^^^^^^^^^^ source.nix string.quoted.double.nix
#                                                     ^ source.nix string.quoted.double.nix punctuation.definition.string.double.end.nix
#                                                      ^ source.nix
#                                                       ^ source.nix string.quoted.double.nix punctuation.definition.string.double.start.nix
#                                                        ^^^^^^^^^^^^^^^^^^^^^ source.nix string.quoted.double.nix
#                                                                             ^ source.nix string.quoted.double.nix punctuation.definition.string.double.end.nix
#                                                                              ^ source.nix punctuation.definition.list.nix
#                                                                               ^ source.nix keyword.operator.nix
>                           overrideSnd ? [ "buildPhase" ]
#^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix
#                           ^^^^^^^^^^^ source.nix variable.parameter.function.1.nix
#                                      ^ source.nix
#                                       ^ source.nix keyword.operator.nix
#                                        ^ source.nix
#                                         ^ source.nix punctuation.definition.list.nix
#                                          ^ source.nix
#                                           ^ source.nix string.quoted.double.nix punctuation.definition.string.double.start.nix
#                                            ^^^^^^^^^^ source.nix string.quoted.double.nix
#                                                      ^ source.nix string.quoted.double.nix punctuation.definition.string.double.end.nix
#                                                       ^ source.nix
#                                                        ^ source.nix punctuation.definition.list.nix
>                         }: attrs1: attrs2:
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix
#                         ^ source.nix punctuation.definition.entity.function.nix
#                          ^ source.nix punctuation.definition.function.nix
#                           ^ source.nix
#                            ^^^^^^ source.nix variable.parameter.function.4.nix
#                                  ^ source.nix punctuation.definition.function.nix
#                                   ^ source.nix
#                                    ^^^^^^ source.nix variable.parameter.function.4.nix
#                                          ^ source.nix punctuation.definition.function.nix
>    foldr (n: set:
#^^^^ source.nix
#    ^^^^^ source.nix variable.parameter.name.nix
#         ^ source.nix
#          ^ source.nix punctuation.definition.expression.nix
#           ^ source.nix variable.parameter.function.4.nix
#            ^ source.nix punctuation.definition.function.nix
#             ^ source.nix
#              ^^^ source.nix variable.parameter.function.4.nix
#                 ^ source.nix punctuation.definition.function.nix
>        setAttr set n ( if set ? ${n}
#^^^^^^^^ source.nix
#        ^^^^^^^ source.nix variable.parameter.name.nix
#               ^ source.nix
#                ^^^ source.nix variable.parameter.name.nix
#                   ^ source.nix
#                    ^ source.nix variable.parameter.name.nix
#                     ^ source.nix
#                      ^ source.nix punctuation.definition.expression.nix
#                       ^ source.nix
#                        ^^ source.nix keyword.other.nix
#                          ^ source.nix
#                           ^^^ source.nix variable.parameter.name.nix
#                              ^ source.nix
#                               ^ source.nix keyword.operator.nix
#                                ^ source.nix
#                                 ^^ source.nix meta.embedded punctuation.section.embedded.begin.nix
#                                   ^ source.nix meta.embedded variable.parameter.name.nix
#                                    ^ source.nix meta.embedded punctuation.section.embedded.end.nix
>            then # merge
#^^^^^^^^^^^^ source.nix
#            ^^ source.nix keyword.other.nix
#              ^^ source.nix keyword.other.nix
#                ^ source.nix
#                 ^ source.nix comment.line.number-sign.nix
#                  ^^^^^^ source.nix comment.line.number-sign.nix
>              if elem n mergeLists # attribute contains list, merge them by concatenating
#^^^^^^^^^^^^^^ source.nix
#              ^^ source.nix keyword.other.nix
#                ^ source.nix
#                 ^^^^ source.nix variable.parameter.name.nix
#                     ^ source.nix
#                      ^ source.nix variable.parameter.name.nix
#                       ^ source.nix
#                        ^^^^^^^^^^ source.nix variable.parameter.name.nix
#                                  ^ source.nix
#                                   ^ source.nix comment.line.number-sign.nix
#                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix comment.line.number-sign.nix
>                then attrs2.${n} ++ attrs1.${n}
#^^^^^^^^^^^^^^^^ source.nix
#                ^^ source.nix keyword.other.nix
#                  ^^ source.nix keyword.other.nix
#                    ^ source.nix
#                     ^^^^^^ source.nix variable.parameter.name.nix
#                           ^ source.nix keyword.operator.nix
#                            ^^ source.nix meta.embedded punctuation.section.embedded.begin.nix
#                              ^ source.nix meta.embedded variable.parameter.name.nix
#                               ^ source.nix meta.embedded punctuation.section.embedded.end.nix
#                                ^ source.nix
#                                 ^^ source.nix keyword.operator.nix
#                                   ^ source.nix
#                                    ^^^^^^ source.nix variable.parameter.name.nix
#                                          ^ source.nix keyword.operator.nix
#                                           ^^ source.nix meta.embedded punctuation.section.embedded.begin.nix
#                                             ^ source.nix meta.embedded variable.parameter.name.nix
#                                              ^ source.nix meta.embedded punctuation.section.embedded.end.nix
>              else if elem n overrideSnd
#^^^^^^^^^^^^^^ source.nix
#              ^^ source.nix keyword.other.nix
#                ^^ source.nix keyword.other.nix
#                  ^ source.nix
#                   ^^ source.nix keyword.other.nix
#                     ^ source.nix
#                      ^^^^ source.nix variable.parameter.name.nix
#                          ^ source.nix
#                           ^ source.nix variable.parameter.name.nix
#                            ^ source.nix
#                             ^^^^^^^^^^^ source.nix variable.parameter.name.nix
>                then attrs1.${n}
#^^^^^^^^^^^^^^^^ source.nix
#                ^^ source.nix keyword.other.nix
#                  ^^ source.nix keyword.other.nix
#                    ^ source.nix
#                     ^^^^^^ source.nix variable.parameter.name.nix
#                           ^ source.nix keyword.operator.nix
#                            ^^ source.nix meta.embedded punctuation.section.embedded.begin.nix
#                              ^ source.nix meta.embedded variable.parameter.name.nix
#                               ^ source.nix meta.embedded punctuation.section.embedded.end.nix
>              else throw "error mergeAttrsNoOverride, attribute ${n} given in both attributes - no merge func defined"
#^^^^^^^^^^^^^^ source.nix
#              ^^ source.nix keyword.other.nix
#                ^^ source.nix keyword.other.nix
#                  ^ source.nix
#                   ^^^^^ source.nix support.function.nix
#                        ^ source.nix
#                         ^ source.nix string.quoted.double.nix punctuation.definition.string.double.start.nix
#                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix string.quoted.double.nix
#                                                                ^^ source.nix string.quoted.double.nix meta.embedded punctuation.section.embedded.begin.nix
#                                                                  ^ source.nix string.quoted.double.nix meta.embedded variable.parameter.name.nix
#                                                                   ^ source.nix string.quoted.double.nix meta.embedded punctuation.section.embedded.end.nix
#                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix string.quoted.double.nix
#                                                                                                                     ^ source.nix string.quoted.double.nix punctuation.definition.string.double.end.nix
>            else attrs2.${n} # add attribute not existing in attr1
#^^^^^^^^^^^^ source.nix
#            ^^ source.nix keyword.other.nix
#              ^^ source.nix keyword.other.nix
#                ^ source.nix
#                 ^^^^^^ source.nix variable.parameter.name.nix
#                       ^ source.nix keyword.operator.nix
#                        ^^ source.nix meta.embedded punctuation.section.embedded.begin.nix
#                          ^ source.nix meta.embedded variable.parameter.name.nix
#                           ^ source.nix meta.embedded punctuation.section.embedded.end.nix
#                            ^ source.nix
#                             ^ source.nix comment.line.number-sign.nix
#                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix comment.line.number-sign.nix
>           )) attrs1 (attrNames attrs2);
#^^^^^^^^^^^ source.nix
#           ^ source.nix punctuation.definition.expression.nix
#            ^ source.nix punctuation.definition.expression.nix
#             ^ source.nix
#              ^^^^^^ source.nix variable.parameter.name.nix
#                    ^ source.nix
#                     ^ source.nix punctuation.definition.expression.nix
#                      ^^^^^^^^^ source.nix variable.parameter.name.nix
#                               ^ source.nix
#                                ^^^^^^ source.nix variable.parameter.name.nix
#                                      ^ source.nix punctuation.definition.expression.nix
#                                       ^ source.nix punctuation.terminator.bind.nix
>
>
>  # example usage:
#^^ source.nix
#  ^ source.nix comment.line.number-sign.nix
#   ^^^^^^^^^^^^^^^ source.nix comment.line.number-sign.nix
>  # mergeAttrByFunc  {
#^^ source.nix
#  ^ source.nix comment.line.number-sign.nix
#   ^^^^^^^^^^^^^^^^^^^ source.nix comment.line.number-sign.nix
>  #   inherit mergeAttrBy; # defined below
#^^ source.nix
#  ^ source.nix comment.line.number-sign.nix
#   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix comment.line.number-sign.nix
>  #   buildInputs = [ a b ];
#^^ source.nix
#  ^ source.nix comment.line.number-sign.nix
#   ^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix comment.line.number-sign.nix
>  # } {
#^^ source.nix
#  ^ source.nix comment.line.number-sign.nix
#   ^^^^ source.nix comment.line.number-sign.nix
>  #  buildInputs = [ c d ];
#^^ source.nix
#  ^ source.nix comment.line.number-sign.nix
#   ^^^^^^^^^^^^^^^^^^^^^^^^ source.nix comment.line.number-sign.nix
>  # };
#^^ source.nix
#  ^ source.nix comment.line.number-sign.nix
#   ^^^ source.nix comment.line.number-sign.nix
>  # will result in
#^^ source.nix
#  ^ source.nix comment.line.number-sign.nix
#   ^^^^^^^^^^^^^^^ source.nix comment.line.number-sign.nix
>  # { mergeAttrsBy = [...]; buildInputs = [ a b c d ]; }
#^^ source.nix
#  ^ source.nix comment.line.number-sign.nix
#   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix comment.line.number-sign.nix
>  # is used by defaultOverridableDelayableArgs and can be used when composing using
#^^ source.nix
#  ^ source.nix comment.line.number-sign.nix
#   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix comment.line.number-sign.nix
>  # foldArgs, composedArgsAndFun or applyAndFun. Example: composableDerivation in all-packages.nix
#^^ source.nix
#  ^ source.nix comment.line.number-sign.nix
#   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix comment.line.number-sign.nix
>  mergeAttrByFunc = x: y:
#^^ source.nix
#  ^^^^^^^^^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#                 ^ source.nix
#                  ^ source.nix keyword.operator.bind.nix
#                   ^ source.nix
#                    ^ source.nix variable.parameter.function.4.nix
#                     ^ source.nix punctuation.definition.function.nix
#                      ^ source.nix
#                       ^ source.nix variable.parameter.function.4.nix
#                        ^ source.nix punctuation.definition.function.nix
>    let
#^^^^ source.nix
#    ^^^ source.nix keyword.other.nix
>          mergeAttrBy2 = {__id_static="0.11202360130761346";__id_dynamic=builtins.hashFile "sha256" /Users/jeffhykin/repos/snowball/random.ignore;
#^^^^^^^^^^ source.nix
#          ^^^^^^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#                      ^ source.nix
#                       ^ source.nix keyword.operator.bind.nix
#                        ^ source.nix
#                         ^ source.nix punctuation.definition.attrset.nix
#                          ^^^^^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#                                     ^ source.nix keyword.operator.bind.nix
#                                      ^ source.nix string.quoted.double.nix punctuation.definition.string.double.start.nix
#                                       ^^^^^^^^^^^^^^^^^^^ source.nix string.quoted.double.nix
#                                                          ^ source.nix string.quoted.double.nix punctuation.definition.string.double.end.nix
#                                                           ^ source.nix punctuation.terminator.bind.nix
#                                                            ^^^^^^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#                                                                        ^ source.nix keyword.operator.bind.nix
#                                                                         ^^^^^^^^ source.nix constant.language.nix
#                                                                                 ^ source.nix keyword.operator.nix
#                                                                                  ^^^^^^^^ source.nix variable.parameter.name.nix
#                                                                                          ^ source.nix
#                                                                                           ^ source.nix string.quoted.double.nix punctuation.definition.string.double.start.nix
#                                                                                            ^^^^^^ source.nix string.quoted.double.nix
#                                                                                                  ^ source.nix string.quoted.double.nix punctuation.definition.string.double.end.nix
#                                                                                                   ^ source.nix
#                                                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix string.unquoted.path.nix
#                                                                                                                                                 ^ source.nix punctuation.terminator.bind.nix
> mergeAttrBy = lib.mergeAttrs; }
#^ source.nix
# ^^^^^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#            ^ source.nix
#             ^ source.nix keyword.operator.bind.nix
#              ^ source.nix
#               ^^^ source.nix variable.parameter.name.nix
#                  ^ source.nix keyword.operator.nix
#                   ^^^^^^^^^^ source.nix variable.parameter.name.nix
#                             ^ source.nix punctuation.terminator.bind.nix
#                              ^ source.nix
#                               ^ source.nix punctuation.definition.attrset.nix
>                      // (maybeAttr "mergeAttrBy" {} x)
#^^^^^^^^^^^^^^^^^^^^^^ source.nix
#                      ^^ source.nix keyword.operator.nix
#                        ^ source.nix
#                         ^ source.nix punctuation.definition.expression.nix
#                          ^^^^^^^^^ source.nix variable.parameter.name.nix
#                                   ^ source.nix
#                                    ^ source.nix string.quoted.double.nix punctuation.definition.string.double.start.nix
#                                     ^^^^^^^^^^^ source.nix string.quoted.double.nix
#                                                ^ source.nix string.quoted.double.nix punctuation.definition.string.double.end.nix
#                                                 ^ source.nix
#                                                  ^ source.nix punctuation.definition.attrset.nix
#                                                   ^ source.nix punctuation.definition.attrset.nix
#                                                    ^ source.nix
#                                                     ^ source.nix variable.parameter.name.nix
#                                                      ^ source.nix punctuation.definition.expression.nix
>                      // (maybeAttr "mergeAttrBy" {} y); in
#^^^^^^^^^^^^^^^^^^^^^^ source.nix
#                      ^^ source.nix keyword.operator.nix
#                        ^ source.nix
#                         ^ source.nix punctuation.definition.expression.nix
#                          ^^^^^^^^^ source.nix variable.parameter.name.nix
#                                   ^ source.nix
#                                    ^ source.nix string.quoted.double.nix punctuation.definition.string.double.start.nix
#                                     ^^^^^^^^^^^ source.nix string.quoted.double.nix
#                                                ^ source.nix string.quoted.double.nix punctuation.definition.string.double.end.nix
#                                                 ^ source.nix
#                                                  ^ source.nix punctuation.definition.attrset.nix
#                                                   ^ source.nix punctuation.definition.attrset.nix
#                                                    ^ source.nix
#                                                     ^ source.nix variable.parameter.name.nix
#                                                      ^ source.nix punctuation.definition.expression.nix
#                                                       ^ source.nix punctuation.terminator.bind.nix
#                                                        ^ source.nix
#                                                         ^^ source.nix keyword.other.nix
>    foldr lib.mergeAttrs {} [
#^^^^ source.nix
#    ^^^^^ source.nix variable.parameter.name.nix
#         ^ source.nix
#          ^^^ source.nix variable.parameter.name.nix
#             ^ source.nix keyword.operator.nix
#              ^^^^^^^^^^ source.nix variable.parameter.name.nix
#                        ^ source.nix
#                         ^ source.nix punctuation.definition.attrset.nix
#                          ^ source.nix punctuation.definition.attrset.nix
#                           ^ source.nix
#                            ^ source.nix punctuation.definition.list.nix
>      x y
#^^^^^^ source.nix
#      ^ source.nix variable.parameter.name.nix
#       ^ source.nix
#        ^ source.nix variable.parameter.name.nix
>      (mapAttrs ( a: v: # merge special names using given functions
#^^^^^^ source.nix
#      ^ source.nix punctuation.definition.expression.nix
#       ^^^^^^^^ source.nix variable.parameter.name.nix
#               ^ source.nix
#                ^ source.nix punctuation.definition.expression.nix
#                 ^ source.nix
#                  ^ source.nix variable.parameter.function.4.nix
#                   ^ source.nix punctuation.definition.function.nix
#                    ^ source.nix
#                     ^ source.nix variable.parameter.function.4.nix
#                      ^ source.nix punctuation.definition.function.nix
#                       ^ source.nix
#                        ^ source.nix comment.line.number-sign.nix
#                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix comment.line.number-sign.nix
>          if x ? ${a}
#^^^^^^^^^^ source.nix
#          ^^ source.nix keyword.other.nix
#            ^ source.nix
#             ^ source.nix variable.parameter.name.nix
#              ^ source.nix
#               ^ source.nix keyword.operator.nix
#                ^ source.nix
#                 ^^ source.nix meta.embedded punctuation.section.embedded.begin.nix
#                   ^ source.nix meta.embedded variable.parameter.name.nix
#                    ^ source.nix meta.embedded punctuation.section.embedded.end.nix
>             then if y ? ${a}
#^^^^^^^^^^^^^ source.nix
#             ^^ source.nix keyword.other.nix
#               ^^ source.nix keyword.other.nix
#                 ^ source.nix
#                  ^^ source.nix keyword.other.nix
#                    ^ source.nix
#                     ^ source.nix variable.parameter.name.nix
#                      ^ source.nix
#                       ^ source.nix keyword.operator.nix
#                        ^ source.nix
#                         ^^ source.nix meta.embedded punctuation.section.embedded.begin.nix
#                           ^ source.nix meta.embedded variable.parameter.name.nix
#                            ^ source.nix meta.embedded punctuation.section.embedded.end.nix
>               then v x.${a} y.${a} # both have attr, use merge func
#^^^^^^^^^^^^^^^ source.nix
#               ^^ source.nix keyword.other.nix
#                 ^^ source.nix keyword.other.nix
#                   ^ source.nix
#                    ^ source.nix variable.parameter.name.nix
#                     ^ source.nix
#                      ^ source.nix variable.parameter.name.nix
#                       ^ source.nix keyword.operator.nix
#                        ^^ source.nix meta.embedded punctuation.section.embedded.begin.nix
#                          ^ source.nix meta.embedded variable.parameter.name.nix
#                           ^ source.nix meta.embedded punctuation.section.embedded.end.nix
#                            ^ source.nix
#                             ^ source.nix variable.parameter.name.nix
#                              ^ source.nix keyword.operator.nix
#                               ^^ source.nix meta.embedded punctuation.section.embedded.begin.nix
#                                 ^ source.nix meta.embedded variable.parameter.name.nix
#                                  ^ source.nix meta.embedded punctuation.section.embedded.end.nix
#                                   ^ source.nix
#                                    ^ source.nix comment.line.number-sign.nix
#                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix comment.line.number-sign.nix
>               else x.${a} # only x has attr
#^^^^^^^^^^^^^^^ source.nix
#               ^^ source.nix keyword.other.nix
#                 ^^ source.nix keyword.other.nix
#                   ^ source.nix
#                    ^ source.nix variable.parameter.name.nix
#                     ^ source.nix keyword.operator.nix
#                      ^^ source.nix meta.embedded punctuation.section.embedded.begin.nix
#                        ^ source.nix meta.embedded variable.parameter.name.nix
#                         ^ source.nix meta.embedded punctuation.section.embedded.end.nix
#                          ^ source.nix
#                           ^ source.nix comment.line.number-sign.nix
#                            ^^^^^^^^^^^^^^^^ source.nix comment.line.number-sign.nix
>             else y.${a} # only y has attr)
#^^^^^^^^^^^^^ source.nix
#             ^^ source.nix keyword.other.nix
#               ^^ source.nix keyword.other.nix
#                 ^ source.nix
#                  ^ source.nix variable.parameter.name.nix
#                   ^ source.nix keyword.operator.nix
#                    ^^ source.nix meta.embedded punctuation.section.embedded.begin.nix
#                      ^ source.nix meta.embedded variable.parameter.name.nix
#                       ^ source.nix meta.embedded punctuation.section.embedded.end.nix
#                        ^ source.nix
#                         ^ source.nix comment.line.number-sign.nix
#                          ^^^^^^^^^^^^^^^^^ source.nix comment.line.number-sign.nix
>          ) (removeAttrs mergeAttrBy2
#^^^^^^^^^^ source.nix
#          ^ source.nix punctuation.definition.expression.nix
#           ^ source.nix
#            ^ source.nix punctuation.definition.expression.nix
#             ^^^^^^^^^^^ source.nix support.function.nix
#                        ^ source.nix
#                         ^^^^^^^^^^^^ source.nix variable.parameter.name.nix
>                         # don't merge attrs which are neither in x nor y
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix
#                         ^ source.nix comment.line.number-sign.nix
#                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix comment.line.number-sign.nix
>                         (filter (a: ! x ? ${a} && ! y ? ${a})
#^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix
#                         ^ source.nix punctuation.definition.expression.nix
#                          ^^^^^^ source.nix variable.parameter.name.nix
#                                ^ source.nix
#                                 ^ source.nix punctuation.definition.expression.nix
#                                  ^ source.nix variable.parameter.function.4.nix
#                                   ^ source.nix punctuation.definition.function.nix
#                                    ^ source.nix
#                                     ^ source.nix keyword.operator.unary.nix
#                                      ^ source.nix
#                                       ^ source.nix variable.parameter.name.nix
#                                        ^ source.nix
#                                         ^ source.nix keyword.operator.nix
#                                          ^ source.nix
#                                           ^^ source.nix meta.embedded punctuation.section.embedded.begin.nix
#                                             ^ source.nix meta.embedded variable.parameter.name.nix
#                                              ^ source.nix meta.embedded punctuation.section.embedded.end.nix
#                                               ^ source.nix
#                                                ^^ source.nix keyword.operator.nix
#                                                  ^ source.nix
#                                                   ^ source.nix keyword.operator.nix
#                                                    ^ source.nix
#                                                     ^ source.nix variable.parameter.name.nix
#                                                      ^ source.nix
#                                                       ^ source.nix keyword.operator.nix
#                                                        ^ source.nix
#                                                         ^^ source.nix meta.embedded punctuation.section.embedded.begin.nix
#                                                           ^ source.nix meta.embedded variable.parameter.name.nix
#                                                            ^ source.nix meta.embedded punctuation.section.embedded.end.nix
#                                                             ^ source.nix punctuation.definition.expression.nix
>                                 (attrNames mergeAttrBy2))
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix
#                                 ^ source.nix punctuation.definition.expression.nix
#                                  ^^^^^^^^^ source.nix variable.parameter.name.nix
#                                           ^ source.nix
#                                            ^^^^^^^^^^^^ source.nix variable.parameter.name.nix
#                                                        ^ source.nix punctuation.definition.expression.nix
#                                                         ^ source.nix punctuation.definition.expression.nix
>            )
#^^^^^^^^^^^^ source.nix
#            ^ source.nix punctuation.definition.expression.nix
>      )
#^^^^^^ source.nix
#      ^ source.nix punctuation.definition.expression.nix
>    ];
#^^^^ source.nix
#    ^ source.nix punctuation.definition.list.nix
#     ^ source.nix punctuation.terminator.bind.nix
>  mergeAttrsByFuncDefaults = foldl mergeAttrByFunc {__id_static="0.6726806392463629";__id_dynamic=builtins.hashFile "sha256" /Users/jeffhykin/repos/snowball/random.ignore;
#^^ source.nix
#  ^^^^^^^^^^^^^^^^^^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#                          ^ source.nix
#                           ^ source.nix keyword.operator.bind.nix
#                            ^ source.nix
#                             ^^^^^ source.nix variable.parameter.name.nix
#                                  ^ source.nix
#                                   ^^^^^^^^^^^^^^^ source.nix variable.parameter.name.nix
#                                                  ^ source.nix
#                                                   ^ source.nix punctuation.definition.attrset.nix
#                                                    ^^^^^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#                                                               ^ source.nix keyword.operator.bind.nix
#                                                                ^ source.nix string.quoted.double.nix punctuation.definition.string.double.start.nix
#                                                                 ^^^^^^^^^^^^^^^^^^ source.nix string.quoted.double.nix
#                                                                                   ^ source.nix string.quoted.double.nix punctuation.definition.string.double.end.nix
#                                                                                    ^ source.nix punctuation.terminator.bind.nix
#                                                                                     ^^^^^^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#                                                                                                 ^ source.nix keyword.operator.bind.nix
#                                                                                                  ^^^^^^^^ source.nix constant.language.nix
#                                                                                                          ^ source.nix keyword.operator.nix
#                                                                                                           ^^^^^^^^ source.nix variable.parameter.name.nix
#                                                                                                                   ^ source.nix
#                                                                                                                    ^ source.nix string.quoted.double.nix punctuation.definition.string.double.start.nix
#                                                                                                                     ^^^^^^ source.nix string.quoted.double.nix
#                                                                                                                           ^ source.nix string.quoted.double.nix punctuation.definition.string.double.end.nix
#                                                                                                                            ^ source.nix
#                                                                                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix string.unquoted.path.nix
#                                                                                                                                                                          ^ source.nix punctuation.terminator.bind.nix
> inherit mergeAttrBy; };
#^ source.nix
# ^^^^^^^ source.nix keyword.other.inherit.nix
#        ^ source.nix
#         ^^^^^^^^^^^ source.nix entity.other.attribute-name.single.nix
#                    ^ source.nix punctuation.terminator.inherit.nix
#                     ^ source.nix
#                      ^ source.nix punctuation.definition.attrset.nix
#                       ^ source.nix punctuation.terminator.bind.nix
>  mergeAttrsByFuncDefaultsClean = list: removeAttrs (mergeAttrsByFuncDefaults list) ["mergeAttrBy"];
#^^ source.nix
#  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#                               ^ source.nix
#                                ^ source.nix keyword.operator.bind.nix
#                                 ^ source.nix
#                                  ^^^^ source.nix variable.parameter.function.4.nix
#                                      ^ source.nix punctuation.definition.function.nix
#                                       ^ source.nix
#                                        ^^^^^^^^^^^ source.nix support.function.nix
#                                                   ^ source.nix
#                                                    ^ source.nix punctuation.definition.expression.nix
#                                                     ^^^^^^^^^^^^^^^^^^^^^^^^ source.nix variable.parameter.name.nix
#                                                                             ^ source.nix
#                                                                              ^^^^ source.nix variable.parameter.name.nix
#                                                                                  ^ source.nix punctuation.definition.expression.nix
#                                                                                   ^ source.nix
#                                                                                    ^ source.nix punctuation.definition.list.nix
#                                                                                     ^ source.nix string.quoted.double.nix punctuation.definition.string.double.start.nix
#                                                                                      ^^^^^^^^^^^ source.nix string.quoted.double.nix
#                                                                                                 ^ source.nix string.quoted.double.nix punctuation.definition.string.double.end.nix
#                                                                                                  ^ source.nix punctuation.definition.list.nix
#                                                                                                   ^ source.nix punctuation.terminator.bind.nix
>
>  # sane defaults (same name as attr name so that inherit can be used)
#^^ source.nix
#  ^ source.nix comment.line.number-sign.nix
#   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix comment.line.number-sign.nix
>  mergeAttrBy = # { buildInputs = concatList; [...]; passthru = mergeAttr; [..]; }
#^^ source.nix
#  ^^^^^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#             ^ source.nix
#              ^ source.nix keyword.operator.bind.nix
#               ^ source.nix
#                ^ source.nix comment.line.number-sign.nix
#                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix comment.line.number-sign.nix
>    listToAttrs (map (n: nameValuePair n lib.concat)
#^^^^ source.nix
#    ^^^^^^^^^^^ source.nix variable.parameter.name.nix
#               ^ source.nix
#                ^ source.nix punctuation.definition.expression.nix
#                 ^^^ source.nix support.function.nix
#                    ^ source.nix
#                     ^ source.nix punctuation.definition.expression.nix
#                      ^ source.nix variable.parameter.function.4.nix
#                       ^ source.nix punctuation.definition.function.nix
#                        ^ source.nix
#                         ^^^^^^^^^^^^^ source.nix variable.parameter.name.nix
#                                      ^ source.nix
#                                       ^ source.nix variable.parameter.name.nix
#                                        ^ source.nix
#                                         ^^^ source.nix variable.parameter.name.nix
#                                            ^ source.nix keyword.operator.nix
#                                             ^^^^^^ source.nix variable.parameter.name.nix
#                                                   ^ source.nix punctuation.definition.expression.nix
>      [ "nativeBuildInputs" "buildInputs" "propagatedBuildInputs" "configureFlags" "prePhases" "postAll" "patches" ])
#^^^^^^ source.nix
#      ^ source.nix punctuation.definition.list.nix
#       ^ source.nix
#        ^ source.nix string.quoted.double.nix punctuation.definition.string.double.start.nix
#         ^^^^^^^^^^^^^^^^^ source.nix string.quoted.double.nix
#                          ^ source.nix string.quoted.double.nix punctuation.definition.string.double.end.nix
#                           ^ source.nix
#                            ^ source.nix string.quoted.double.nix punctuation.definition.string.double.start.nix
#                             ^^^^^^^^^^^ source.nix string.quoted.double.nix
#                                        ^ source.nix string.quoted.double.nix punctuation.definition.string.double.end.nix
#                                         ^ source.nix
#                                          ^ source.nix string.quoted.double.nix punctuation.definition.string.double.start.nix
#                                           ^^^^^^^^^^^^^^^^^^^^^ source.nix string.quoted.double.nix
#                                                                ^ source.nix string.quoted.double.nix punctuation.definition.string.double.end.nix
#                                                                 ^ source.nix
#                                                                  ^ source.nix string.quoted.double.nix punctuation.definition.string.double.start.nix
#                                                                   ^^^^^^^^^^^^^^ source.nix string.quoted.double.nix
#                                                                                 ^ source.nix string.quoted.double.nix punctuation.definition.string.double.end.nix
#                                                                                  ^ source.nix
#                                                                                   ^ source.nix string.quoted.double.nix punctuation.definition.string.double.start.nix
#                                                                                    ^^^^^^^^^ source.nix string.quoted.double.nix
#                                                                                             ^ source.nix string.quoted.double.nix punctuation.definition.string.double.end.nix
#                                                                                              ^ source.nix
#                                                                                               ^ source.nix string.quoted.double.nix punctuation.definition.string.double.start.nix
#                                                                                                ^^^^^^^ source.nix string.quoted.double.nix
#                                                                                                       ^ source.nix string.quoted.double.nix punctuation.definition.string.double.end.nix
#                                                                                                        ^ source.nix
#                                                                                                         ^ source.nix string.quoted.double.nix punctuation.definition.string.double.start.nix
#                                                                                                          ^^^^^^^ source.nix string.quoted.double.nix
#                                                                                                                 ^ source.nix string.quoted.double.nix punctuation.definition.string.double.end.nix
#                                                                                                                  ^ source.nix
#                                                                                                                   ^ source.nix punctuation.definition.list.nix
#                                                                                                                    ^ source.nix punctuation.definition.expression.nix
>    // listToAttrs (map (n: nameValuePair n lib.mergeAttrs) [ "passthru" "meta" "cfg" "flags" ])
#^^^^ source.nix
#    ^^ source.nix keyword.operator.nix
#      ^ source.nix
#       ^^^^^^^^^^^ source.nix variable.parameter.name.nix
#                  ^ source.nix
#                   ^ source.nix punctuation.definition.expression.nix
#                    ^^^ source.nix support.function.nix
#                       ^ source.nix
#                        ^ source.nix punctuation.definition.expression.nix
#                         ^ source.nix variable.parameter.function.4.nix
#                          ^ source.nix punctuation.definition.function.nix
#                           ^ source.nix
#                            ^^^^^^^^^^^^^ source.nix variable.parameter.name.nix
#                                         ^ source.nix
#                                          ^ source.nix variable.parameter.name.nix
#                                           ^ source.nix
#                                            ^^^ source.nix variable.parameter.name.nix
#                                               ^ source.nix keyword.operator.nix
#                                                ^^^^^^^^^^ source.nix variable.parameter.name.nix
#                                                          ^ source.nix punctuation.definition.expression.nix
#                                                           ^ source.nix
#                                                            ^ source.nix punctuation.definition.list.nix
#                                                             ^ source.nix
#                                                              ^ source.nix string.quoted.double.nix punctuation.definition.string.double.start.nix
#                                                               ^^^^^^^^ source.nix string.quoted.double.nix
#                                                                       ^ source.nix string.quoted.double.nix punctuation.definition.string.double.end.nix
#                                                                        ^ source.nix
#                                                                         ^ source.nix string.quoted.double.nix punctuation.definition.string.double.start.nix
#                                                                          ^^^^ source.nix string.quoted.double.nix
#                                                                              ^ source.nix string.quoted.double.nix punctuation.definition.string.double.end.nix
#                                                                               ^ source.nix
#                                                                                ^ source.nix string.quoted.double.nix punctuation.definition.string.double.start.nix
#                                                                                 ^^^ source.nix string.quoted.double.nix
#                                                                                    ^ source.nix string.quoted.double.nix punctuation.definition.string.double.end.nix
#                                                                                     ^ source.nix
#                                                                                      ^ source.nix string.quoted.double.nix punctuation.definition.string.double.start.nix
#                                                                                       ^^^^^ source.nix string.quoted.double.nix
#                                                                                            ^ source.nix string.quoted.double.nix punctuation.definition.string.double.end.nix
#                                                                                             ^ source.nix
#                                                                                              ^ source.nix punctuation.definition.list.nix
#                                                                                               ^ source.nix punctuation.definition.expression.nix
>    // listToAttrs (map (n: nameValuePair n (a: b: "${a}\n${b}") ) [ "preConfigure" "postInstall" ])
#^^^^ source.nix
#    ^^ source.nix keyword.operator.nix
#      ^ source.nix
#       ^^^^^^^^^^^ source.nix variable.parameter.name.nix
#                  ^ source.nix
#                   ^ source.nix punctuation.definition.expression.nix
#                    ^^^ source.nix support.function.nix
#                       ^ source.nix
#                        ^ source.nix punctuation.definition.expression.nix
#                         ^ source.nix variable.parameter.function.4.nix
#                          ^ source.nix punctuation.definition.function.nix
#                           ^ source.nix
#                            ^^^^^^^^^^^^^ source.nix variable.parameter.name.nix
#                                         ^ source.nix
#                                          ^ source.nix variable.parameter.name.nix
#                                           ^ source.nix
#                                            ^ source.nix punctuation.definition.expression.nix
#                                             ^ source.nix variable.parameter.function.4.nix
#                                              ^ source.nix punctuation.definition.function.nix
#                                               ^ source.nix
#                                                ^ source.nix variable.parameter.function.4.nix
#                                                 ^ source.nix punctuation.definition.function.nix
#                                                  ^ source.nix
#                                                   ^ source.nix string.quoted.double.nix punctuation.definition.string.double.start.nix
#                                                    ^^ source.nix string.quoted.double.nix meta.embedded punctuation.section.embedded.begin.nix
#                                                      ^ source.nix string.quoted.double.nix meta.embedded variable.parameter.name.nix
#                                                       ^ source.nix string.quoted.double.nix meta.embedded punctuation.section.embedded.end.nix
#                                                        ^^ source.nix string.quoted.double.nix constant.character.escape.nix
#                                                          ^^ source.nix string.quoted.double.nix meta.embedded punctuation.section.embedded.begin.nix
#                                                            ^ source.nix string.quoted.double.nix meta.embedded variable.parameter.name.nix
#                                                             ^ source.nix string.quoted.double.nix meta.embedded punctuation.section.embedded.end.nix
#                                                              ^ source.nix string.quoted.double.nix punctuation.definition.string.double.end.nix
#                                                               ^ source.nix punctuation.definition.expression.nix
#                                                                ^ source.nix
#                                                                 ^ source.nix punctuation.definition.expression.nix
#                                                                  ^ source.nix
#                                                                   ^ source.nix punctuation.definition.list.nix
#                                                                    ^ source.nix
#                                                                     ^ source.nix string.quoted.double.nix punctuation.definition.string.double.start.nix
#                                                                      ^^^^^^^^^^^^ source.nix string.quoted.double.nix
#                                                                                  ^ source.nix string.quoted.double.nix punctuation.definition.string.double.end.nix
#                                                                                   ^ source.nix
#                                                                                    ^ source.nix string.quoted.double.nix punctuation.definition.string.double.start.nix
#                                                                                     ^^^^^^^^^^^ source.nix string.quoted.double.nix
#                                                                                                ^ source.nix string.quoted.double.nix punctuation.definition.string.double.end.nix
#                                                                                                 ^ source.nix
#                                                                                                  ^ source.nix punctuation.definition.list.nix
#                                                                                                   ^ source.nix punctuation.definition.expression.nix
>  ;
#^^ source.nix
#  ^ source.nix punctuation.terminator.bind.nix
>
>  nixType = x:
#^^ source.nix
#  ^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#         ^ source.nix
#          ^ source.nix keyword.operator.bind.nix
#           ^ source.nix
#            ^ source.nix variable.parameter.function.4.nix
#             ^ source.nix punctuation.definition.function.nix
>      if isAttrs x then
#^^^^^^ source.nix
#      ^^ source.nix keyword.other.nix
#        ^ source.nix
#         ^^^^^^^ source.nix variable.parameter.name.nix
#                ^ source.nix
#                 ^ source.nix variable.parameter.name.nix
#                  ^ source.nix
#                   ^^ source.nix keyword.other.nix
#                     ^^ source.nix keyword.other.nix
>          if x ? outPath then "derivation"
#^^^^^^^^^^ source.nix
#          ^^ source.nix keyword.other.nix
#            ^ source.nix
#             ^ source.nix variable.parameter.name.nix
#              ^ source.nix
#               ^ source.nix keyword.operator.nix
#                ^ source.nix
#                 ^^^^^^^ source.nix variable.parameter.name.nix
#                        ^ source.nix
#                         ^^ source.nix keyword.other.nix
#                           ^^ source.nix keyword.other.nix
#                             ^ source.nix
#                              ^ source.nix string.quoted.double.nix punctuation.definition.string.double.start.nix
#                               ^^^^^^^^^^ source.nix string.quoted.double.nix
#                                         ^ source.nix string.quoted.double.nix punctuation.definition.string.double.end.nix
>          else "attrs"
#^^^^^^^^^^ source.nix
#          ^^ source.nix keyword.other.nix
#            ^^ source.nix keyword.other.nix
#              ^ source.nix
#               ^ source.nix string.quoted.double.nix punctuation.definition.string.double.start.nix
#                ^^^^^ source.nix string.quoted.double.nix
#                     ^ source.nix string.quoted.double.nix punctuation.definition.string.double.end.nix
>      else if lib.isFunction x then "function"
#^^^^^^ source.nix
#      ^^ source.nix keyword.other.nix
#        ^^ source.nix keyword.other.nix
#          ^ source.nix
#           ^^ source.nix keyword.other.nix
#             ^ source.nix
#              ^^^ source.nix variable.parameter.name.nix
#                 ^ source.nix keyword.operator.nix
#                  ^^^^^^^^^^ source.nix variable.parameter.name.nix
#                            ^ source.nix
#                             ^ source.nix variable.parameter.name.nix
#                              ^ source.nix
#                               ^^ source.nix keyword.other.nix
#                                 ^^ source.nix keyword.other.nix
#                                   ^ source.nix
#                                    ^ source.nix string.quoted.double.nix punctuation.definition.string.double.start.nix
#                                     ^^^^^^^^ source.nix string.quoted.double.nix
#                                             ^ source.nix string.quoted.double.nix punctuation.definition.string.double.end.nix
>      else if isList x then "list"
#^^^^^^ source.nix
#      ^^ source.nix keyword.other.nix
#        ^^ source.nix keyword.other.nix
#          ^ source.nix
#           ^^ source.nix keyword.other.nix
#             ^ source.nix
#              ^^^^^^ source.nix variable.parameter.name.nix
#                    ^ source.nix
#                     ^ source.nix variable.parameter.name.nix
#                      ^ source.nix
#                       ^^ source.nix keyword.other.nix
#                         ^^ source.nix keyword.other.nix
#                           ^ source.nix
#                            ^ source.nix string.quoted.double.nix punctuation.definition.string.double.start.nix
#                             ^^^^ source.nix string.quoted.double.nix
#                                 ^ source.nix string.quoted.double.nix punctuation.definition.string.double.end.nix
>      else if x == true then "bool"
#^^^^^^ source.nix
#      ^^ source.nix keyword.other.nix
#        ^^ source.nix keyword.other.nix
#          ^ source.nix
#           ^^ source.nix keyword.other.nix
#             ^ source.nix
#              ^ source.nix variable.parameter.name.nix
#               ^ source.nix
#                ^^ source.nix keyword.operator.nix
#                  ^ source.nix
#                   ^^^^ source.nix constant.language.nix
#                       ^ source.nix
#                        ^^ source.nix keyword.other.nix
#                          ^^ source.nix keyword.other.nix
#                            ^ source.nix
#                             ^ source.nix string.quoted.double.nix punctuation.definition.string.double.start.nix
#                              ^^^^ source.nix string.quoted.double.nix
#                                  ^ source.nix string.quoted.double.nix punctuation.definition.string.double.end.nix
>      else if x == false then "bool"
#^^^^^^ source.nix
#      ^^ source.nix keyword.other.nix
#        ^^ source.nix keyword.other.nix
#          ^ source.nix
#           ^^ source.nix keyword.other.nix
#             ^ source.nix
#              ^ source.nix variable.parameter.name.nix
#               ^ source.nix
#                ^^ source.nix keyword.operator.nix
#                  ^ source.nix
#                   ^^^^^ source.nix constant.language.nix
#                        ^ source.nix
#                         ^^ source.nix keyword.other.nix
#                           ^^ source.nix keyword.other.nix
#                             ^ source.nix
#                              ^ source.nix string.quoted.double.nix punctuation.definition.string.double.start.nix
#                               ^^^^ source.nix string.quoted.double.nix
#                                   ^ source.nix string.quoted.double.nix punctuation.definition.string.double.end.nix
>      else if x == null then "null"
#^^^^^^ source.nix
#      ^^ source.nix keyword.other.nix
#        ^^ source.nix keyword.other.nix
#          ^ source.nix
#           ^^ source.nix keyword.other.nix
#             ^ source.nix
#              ^ source.nix variable.parameter.name.nix
#               ^ source.nix
#                ^^ source.nix keyword.operator.nix
#                  ^ source.nix
#                   ^^^^ source.nix constant.language.nix
#                       ^ source.nix
#                        ^^ source.nix keyword.other.nix
#                          ^^ source.nix keyword.other.nix
#                            ^ source.nix
#                             ^ source.nix string.quoted.double.nix punctuation.definition.string.double.start.nix
#                              ^^^^ source.nix string.quoted.double.nix
#                                  ^ source.nix string.quoted.double.nix punctuation.definition.string.double.end.nix
>      else if isInt x then "int"
#^^^^^^ source.nix
#      ^^ source.nix keyword.other.nix
#        ^^ source.nix keyword.other.nix
#          ^ source.nix
#           ^^ source.nix keyword.other.nix
#             ^ source.nix
#              ^^^^^ source.nix variable.parameter.name.nix
#                   ^ source.nix
#                    ^ source.nix variable.parameter.name.nix
#                     ^ source.nix
#                      ^^ source.nix keyword.other.nix
#                        ^^ source.nix keyword.other.nix
#                          ^ source.nix
#                           ^ source.nix string.quoted.double.nix punctuation.definition.string.double.start.nix
#                            ^^^ source.nix string.quoted.double.nix
#                               ^ source.nix string.quoted.double.nix punctuation.definition.string.double.end.nix
>      else "string";
#^^^^^^ source.nix
#      ^^ source.nix keyword.other.nix
#        ^^ source.nix keyword.other.nix
#          ^ source.nix
#           ^ source.nix string.quoted.double.nix punctuation.definition.string.double.start.nix
#            ^^^^^^ source.nix string.quoted.double.nix
#                  ^ source.nix string.quoted.double.nix punctuation.definition.string.double.end.nix
#                   ^ source.nix punctuation.terminator.bind.nix
>
>  /* deprecated:
#^^ source.nix
#  ^^^^^^^^^^^^^^^ source.nix comment.block.nix
>
>     For historical reasons, imap has an index starting at 1.
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix comment.block.nix
>
>     But for consistency with the rest of the library we want an index
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix comment.block.nix
>     starting at zero.
#^^^^^^^^^^^^^^^^^^^^^^^ source.nix comment.block.nix
>  */
#^^ source.nix comment.block.nix
#  ^^ source.nix comment.block.nix
>  imap = imap1;
#^^ source.nix
#  ^^^^ source.nix entity.other.attribute-name.multipart.nix
#      ^ source.nix
#       ^ source.nix keyword.operator.bind.nix
#        ^ source.nix
#         ^^^^^ source.nix variable.parameter.name.nix
#              ^ source.nix punctuation.terminator.bind.nix
>
>  # Fake hashes. Can be used as hash placeholders, when computing hash ahead isn't trivial
#^^ source.nix
#  ^ source.nix comment.line.number-sign.nix
#   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix comment.line.number-sign.nix
>  fakeHash = "sha256-AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=";
#^^ source.nix
#  ^^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#          ^ source.nix
#           ^ source.nix keyword.operator.bind.nix
#            ^ source.nix
#             ^ source.nix string.quoted.double.nix punctuation.definition.string.double.start.nix
#              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix string.quoted.double.nix
#                                                                 ^ source.nix string.quoted.double.nix punctuation.definition.string.double.end.nix
#                                                                  ^ source.nix punctuation.terminator.bind.nix
>  fakeSha256 = "0000000000000000000000000000000000000000000000000000000000000000";
#^^ source.nix
#  ^^^^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#            ^ source.nix
#             ^ source.nix keyword.operator.bind.nix
#              ^ source.nix
#               ^ source.nix string.quoted.double.nix punctuation.definition.string.double.start.nix
#                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix string.quoted.double.nix
#                                                                                ^ source.nix string.quoted.double.nix punctuation.definition.string.double.end.nix
#                                                                                 ^ source.nix punctuation.terminator.bind.nix
>  fakeSha512 = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
#^^ source.nix
#  ^^^^^^^^^^ source.nix entity.other.attribute-name.multipart.nix
#            ^ source.nix
#             ^ source.nix keyword.operator.bind.nix
#              ^ source.nix
#               ^ source.nix string.quoted.double.nix punctuation.definition.string.double.start.nix
#                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ source.nix string.quoted.double.nix
#                                                                                                                                                ^ source.nix string.quoted.double.nix punctuation.definition.string.double.end.nix
#                                                                                                                                                 ^ source.nix punctuation.terminator.bind.nix
>}
#^ source.nix punctuation.definition.attrset.nix